fdir::set()
# load functions
source("Solve MLM Parameters.R")
source("Generate MLM Data.R")
# set random number seed
set.seed(90291)
# list of parameter values and effect sizes
power.inputs <- list(
mean.Y = c(50), # mean of Y
mean.X = c(0,0), # X means
mean.W = c(0,0), # W means
var.Y = c(100), # total variance of Y
var.X = c(1,1), # total variances of Xs
var.W = c(1,1), # total variances of Ws
corr.X = c(.20,.20), # range of within-cluster X correlations
corr.W = c(.20,.20), # range of between-cluster W correlations
corr.X.W = c(.20,.20), # range of between-cluster X-W correlations
corr.raneffects = c(0,0), # range of random effect correlations
icc.Y = c(.20), # intraclass correlations of Y
icc.X = c(.20,.20), # range of intraclass correlations for level-1 Xs
R2.X.w = c(.065), # explained variation due to within-cluster fixed effects
R2.crosslevel.w = c(.01), # interaction explained variation
R2.ranslopes.w = c(.03), # random slope explained variation
R2.increment.b = c(.065), # incremental between-cluster explained variation
weights.X.w = c(.65,.35), # fixed effect weights for level-1 Xs
weights.crosslevel.w = c(1,0,0,0), # interaction weights (X1*Ws, X2*Ws)
weights.ranslopes.w = c(1,0), # level-1 X weights for random slope variation
weights.increment.b = c(0,"covariate",.65,.35) # fixed effect weights for level-2 Xbs and Ws
)
# examine population parameters
solve.MLM.parameters(power.inputs)
num.samples <- 2000 # number of random samples
# num.clusters <- c(30,60,90,120) # vector of level-2 sample sizes
# num.percluster <- c(10,20,30) # vector of within-cluster sample sizes
num.clusters <- c(60) # vector of level-2 sample sizes
num.percluster <- c(20) # vector of within-cluster sample sizes
sim.results <- replicate(num.samples,
simulate.MLM.data(num.clusters,num.percluster,solve.MLM.parameters(power.inputs)),
simplify = F)
Reduce("+", sim.results)/ length(sim.results)
sim.results <- replicate(num.samples,
simulate.MLM.data(num.clusters,num.percluster,solve.MLM.parameters(power.inputs)),
simplify = F)
Reduce("+", sim.results)/ length(sim.results)
# load libraries
suppressPackageStartupMessages({
library(fdir)
library(mvtnorm)
library(lme4)
library(varTestnlme)
library(r2mlm)
})
# this script's location is the working directory
fdir::set()
# load functions
source("Solve MLM Parameters.R")
source("Generate MLM Data.R")
# set random number seed
set.seed(90291)
# list of parameter values and effect sizes
power.inputs <- list(
mean.Y = c(50), # mean of Y
mean.X = c(0,0), # X means
mean.W = c(0,0), # W means
var.Y = c(100), # total variance of Y
var.X = c(1,1), # total variances of Xs
var.W = c(1,1), # total variances of Ws
corr.X = c(.20,.20), # range of within-cluster X correlations
corr.W = c(.20,.20), # range of between-cluster W correlations
corr.X.W = c(.20,.20), # range of between-cluster X-W correlations
corr.raneffects = c(0,0), # range of random effect correlations
icc.Y = c(.20), # intraclass correlations of Y
icc.X = c(.20,.20), # range of intraclass correlations for level-1 Xs
R2.X.w = c(.065), # explained variation due to within-cluster fixed effects
R2.crosslevel.w = c(.01), # interaction explained variation
R2.ranslopes.w = c(.03), # random slope explained variation
R2.increment.b = c(.065), # incremental between-cluster explained variation
weights.X.w = c(.65,.35), # fixed effect weights for level-1 Xs
weights.crosslevel.w = c(1,0,0,0), # interaction weights (X1*Ws, X2*Ws)
weights.ranslopes.w = c(1,0), # level-1 X weights for random slope variation
weights.increment.b = c(0,"covariate",.65,.35) # fixed effect weights for level-2 Xbs and Ws
)
# examine population parameters
solve.MLM.parameters(power.inputs)
# simulate one data set
# num.clusters <- c(10000)
# num.percluster <- c(20)
# simulate.MLM.data(num.clusters,num.percluster,solve.MLM.parameters(power.inputs))
# specify simulation conditions
num.samples <- 2000 # number of random samples
num.clusters <- c(30,60,90,120) # vector of level-2 sample sizes
num.percluster <- c(10,20,30) # vector of within-cluster sample sizes
# run simulation and summarize results
sim.results <- replicate(num.samples,
simulate.MLM.data(num.clusters,num.percluster,solve.MLM.parameters(power.inputs)),
simplify = F)
Reduce("+", sim.results)/ length(sim.results)
# load librarires
suppressPackageStartupMessages({
library(fdir)
library(mvtnorm)
library(lme4)
library(varTestnlme)
library(r2mlm)
})
# this script's location is the working directory
fdir::set()
# load simulation functions
source("Solve MLM Parameters.R")
source("Generate MLM Data.R")
# set random number seed
set.seed(90291)
# list of parameter values and effect sizes
power.inputs <- list(
mean.Y = c(50),
mean.X = c(2,0,0),
mean.W = c(.50,0,0),
var.Y = c(100),
var.X = c(2,1,1),
var.W = c(.25,1,1),
corr.X = c(.05,.35),
corr.W = c(.05,.35),
corr.X.W = c(.05,.35),
corr.raneffects = c(.05,.35),
icc.Y = c(.45),
icc.X = c(.40,.50),
R2.X.w = c(.13),
R2.crosslevel.w = c(.05),
R2.ranslopes.w = c(.10),
R2.increment.b = c(.065),
weights.X.w = c(.50,.25,.25),
weights.crosslevel.w = c(.60,0,0,.40,0,0,0,0,0),
weights.ranslopes.w = c(.60,.40,0),
weights.increment.b = c(0,0,"covariate",.50,.25,.25)
)
# examine population parameters
solve.MLM.parameters(power.inputs)
# simulate one data set
# num.clusters <- c(50000)
# num.percluster <- c(20)
# simulate.MLM.data(num.clusters,num.percluster,solve.MLM.parameters(power.inputs))
# specify simulation conditions
num.samples <- 4000 # number of random samples
num.clusters <- c(50,60,70,80,90,100,110) # vector of level-2 sample sizes
num.percluster <- c(5) # vector of within-cluster sample sizes
# run simulation and summarize the results
sim.results <- replicate(num.samples, simulate.MLM.data(num.clusters,num.percluster,solve.MLM.parameters(power.inputs)), simplify = F)
Reduce("+", sim.results)/ length(sim.results)
# load librarires
suppressPackageStartupMessages({
library(fdir)
library(mvtnorm)
library(lme4)
library(varTestnlme)
library(r2mlm)
})
# this script's location is the working directory
fdir::set()
# load simulation functions
source("Solve MLM Parameters.R")
source("Generate MLM Data.R")
# set random number seed
set.seed(90291)
# list of parameter values and effect sizes
power.inputs <- list(
mean.Y = c(50),
mean.X = c(2,0,0),
mean.W = c(0,0,0),
var.Y = c(100),
var.X = c(2,1,1),
var.W = c(1,1,1),
corr.X = c(.05,.35),
corr.W = c(.05,.35),
corr.X.W = c(.05,.35),
corr.raneffects = c(.05,.35),
icc.Y = c(.45),
icc.X = c(.40,.50),
R2.X.w = c(.13),
R2.crosslevel.w = c(.05),
R2.ranslopes.w = c(.10),
R2.increment.b = c(.065),
weights.X.w = c(.50,.25,.25),
weights.crosslevel.w = c(.60,0,0,.40,0,0,0,0,0),
weights.ranslopes.w = c(.60,.40,0),
weights.increment.b = c(0,0,"covariate",.50,.25,.25)
)
# examine population parameters
solve.MLM.parameters(power.inputs)
# simulate one data set
# num.clusters <- c(10000)
# num.percluster <- c(20)
# simulate.MLM.data(num.clusters,num.percluster,solve.MLM.parameters(power.inputs))
# specify simulation conditions
num.samples <- 4000 # number of random samples
num.clusters <- c(50,60,70,80,90,100,110) # vector of level-2 sample sizes
num.percluster <- c(5) # vector of within-cluster sample sizes
# run simulation and summarize the results
sim.results <- replicate(num.samples, simulate.MLM.data(num.clusters,num.percluster,solve.MLM.parameters(power.inputs)), simplify = F)
Reduce("+", sim.results)/ length(sim.results)
fdir::set()
dat <- read.table("./imps/imps.dat", na.strings = "999")
names(dat) <- c("Imputation", "id", "txgrp", "male", "age", "edugroup", "workhrs", "exercise", "paingrps",
"pain", "anxiety", "stress", "control", "depress", "interfere", "disability",
paste0("dep", seq(1:7)), paste0("int", seq(1:6)), paste0("dis", seq(1:6)))
View(dat)
m <- 1; b <- 1
dat <- imps[imps$Imputation == m,]
fdir::set()
imps <- read.table("./imps/imps.dat", na.strings = "999")
names(imps) <- c("Imputation", "id", "txgrp", "male", "age", "edugroup", "workhrs", "exercise", "paingrps",
"pain", "anxiety", "stress", "control", "depress", "interfere", "disability",
paste0("dep", seq(1:7)), paste0("int", seq(1:6)), paste0("dis", seq(1:6)))
dat <- imps[imps$Imputation == m,]
set.seed(90291)
imps <- 100
boots <- 5
# set working directory
fdir::set()
imps <- read.table("./imps/imps.dat", na.strings = "999")
names(imps) <- c("Imputation", "id", "txgrp", "male", "age", "edugroup", "workhrs", "exercise", "paingrps",
"pain", "anxiety", "stress", "control", "depress", "interfere", "disability",
paste0("dep", seq(1:7)), paste0("int", seq(1:6)), paste0("dis", seq(1:6)))
for(m in 1:imps){
dat <- imps[imps$Imputation == m,]
for(b in 1:boots){
boot <- dat[sample(nrow(dat), nrow(dat),replace = T),]
filename <- paste0("boot.", m, ".", b, ".dat")
write.table(boot, paste0("./bootstraps/", filename), row.names = F, col.names = F)
write.table(filename, paste0(getwd(),"/bootlist.dat"), row.names = F, col.names = F, append = T, quote = F)
}
}
set.seed(90291)
imps <- 100
boots <- 5
# set working directory
fdir::set()
imps <- read.table("./imps/imps.dat", na.strings = "999")
names(imps) <- c("Imputation", "id", "txgrp", "male", "age", "edugroup", "workhrs", "exercise", "paingrps",
"pain", "anxiety", "stress", "control", "depress", "interfere", "disability",
paste0("dep", seq(1:7)), paste0("int", seq(1:6)), paste0("dis", seq(1:6)))
m <- 1; b <- 1
dat <- imps[imps$Imputation == m,]
boot <- dat[sample(nrow(dat), nrow(dat),replace = T),]
filename <- paste0("boot.", m, ".", b, ".dat")
filename
write.table(boot, paste0("./bootstraps/", filename), row.names = F, col.names = F)
write.table(filename, paste0(getwd(),"/bootlist.dat"), row.names = F, col.names = F, append = T, quote = F)
write.table(filename, "./bootstraps/bootlist.dat", row.names = F, col.names = F, append = T, quote = F)
set.seed(90291)
imps <- 100
boots <- 500
# set working directory
fdir::set()
imps <- read.table("./imps/imps.dat", na.strings = "999")
names(imps) <- c("Imputation", "id", "txgrp", "male", "age", "edugroup", "workhrs", "exercise", "paingrps",
"pain", "anxiety", "stress", "control", "depress", "interfere", "disability",
paste0("dep", seq(1:7)), paste0("int", seq(1:6)), paste0("dis", seq(1:6)))
for(m in 1:imps){
dat <- imps[imps$Imputation == m,]
for(b in 1:boots){
boot <- dat[sample(nrow(dat), nrow(dat),replace = T),]
filename <- paste0("boot.", m, ".", b, ".dat")
write.table(boot, paste0("./bootstraps/", filename), row.names = F, col.names = F)
write.table(filename, "./bootstraps/bootlist.dat", row.names = F, col.names = F, append = T, quote = F)
}
}
set.seed(90291)
imps <- 1
boots <- 500
# set working directory
fdir::set()
imps <- read.table("./imps/imps.dat", na.strings = "999")
names(imps) <- c("Imputation", "id", "txgrp", "male", "age", "edugroup", "workhrs", "exercise", "paingrps",
"pain", "anxiety", "stress", "control", "depress", "interfere", "disability",
paste0("dep", seq(1:7)), paste0("int", seq(1:6)), paste0("dis", seq(1:6)))
for(m in 1:imps){
dat <- imps[imps$Imputation == m,]
for(b in 1:boots){
boot <- dat[sample(nrow(dat), nrow(dat),replace = T),]
filename <- paste0("boot.", m, ".", b, ".dat")
write.table(boot, paste0("./bootstraps/", filename), row.names = F, col.names = F)
write.table(filename, "./bootstraps/bootlist.dat", row.names = F, col.names = F, append = T, quote = F)
}
}
set.seed(90291)
imps <- 1
boots <- 1
# set working directory
fdir::set()
imps <- read.table("./imps/imps.dat", na.strings = "999")
names(imps) <- c("Imputation", "id", "txgrp", "male", "age", "edugroup", "workhrs", "exercise", "paingrps",
"pain", "anxiety", "stress", "control", "depress", "interfere", "disability",
paste0("dep", seq(1:7)), paste0("int", seq(1:6)), paste0("dis", seq(1:6)))
for(m in 1:imps){
dat <- imps[imps$Imputation == m,]
for(b in 1:boots){
boot <- dat[sample(nrow(dat), nrow(dat),replace = T),]
filename <- paste0("boot.", m, ".", b, ".dat")
write.table(boot, paste0("./bootstraps/", filename), row.names = F, col.names = F)
write.table(filename, "./bootstraps/bootlist.dat", row.names = F, col.names = F, append = T, quote = F)
}
}
1:imps
set.seed(90291)
imputations <- 100
bootsamples <- 500
# set working directory
fdir::set()
imps <- read.table("./imps/imps.dat", na.strings = "999")
names(imps) <- c("Imputation", "id", "txgrp", "male", "age", "edugroup", "workhrs", "exercise", "paingrps",
"pain", "anxiety", "stress", "control", "depress", "interfere", "disability",
paste0("dep", seq(1:7)), paste0("int", seq(1:6)), paste0("dis", seq(1:6)))
for(m in 1:imputations){
dat <- imps[imps$Imputation == m,]
for(b in 1:bootsamples){
boot <- dat[sample(nrow(dat), nrow(dat),replace = T),]
filename <- paste0("boot.", m, ".", b, ".dat")
write.table(boot, paste0("./bootstraps/", filename), row.names = F, col.names = F)
write.table(filename, "./bootstraps/bootlist.dat", row.names = F, col.names = F, append = T, quote = F)
}
}
set.seed(90291)
imputations <- 100
bootsamples <- 500
# set working directory
fdir::set()
imps <- read.table("./imps/imps.dat", na.strings = "999")
names(imps) <- c("Imputation", "id", "txgrp", "male", "age", "edugroup", "workhrs", "exercise", "paingrps",
"pain", "anxiety", "stress", "control", "depress", "interfere", "disability",
paste0("dep", seq(1:7)), paste0("int", seq(1:6)), paste0("dis", seq(1:6)))
for(m in 1:imputations){
dat <- imps[imps$Imputation == m,]
for(b in 1:bootsamples){
boot <- dat[sample(nrow(dat), nrow(dat),replace = T),]
filename <- paste0("boot.", m, ".", b, ".dat")
write.table(boot, paste0("./bootstraps/", filename), row.names = F, col.names = F)
write.table(filename, "./bootstraps/bootlist.dat", row.names = F, col.names = F, append = T, quote = F)
print(paste0("imputation = ", m, " bootstrap sample = ", b))
}
}
system("mplus Example\ 10.5\ -\ Mediation/10.5\ -\ Analyze\ FCS\ Imputations.inp Example\ 10.5\ -\ Mediation/10.5\ -\ Analyze\ FCS\ Imputations.out")
# fit bootstrap samples with mplus
system("/applications/mplus Example\ 10.5\ -\ Mediation/10.5\ -\ Analyze\ FCS\ Imputations.inp Example\ 10.5\ -\ Mediation/10.5\ -\ Analyze\ FCS\ Imputations.out")
# fit bootstrap samples with mplus
system("/applications/mplus/mplus Example\ 10.5\ -\ Mediation/10.5\ -\ Analyze\ FCS\ Imputations.inp Example\ 10.5\ -\ Mediation/10.5\ -\ Analyze\ FCS\ Imputations.out")
# fit bootstrap samples with mplus
system("/applications/mplus/mplus 10.5\ -\ Analyze\ FCS\ Imputations.inp 10.5\ -\ Analyze\ FCS\ Imputations.out")
# fit bootstrap samples with mplus
system("/applications/mplus/mplus 10.5\ -\ Analyze\ FCS\ Imputations.inp 10.5\ -\ Analyze\ FCS\ Imputations.out")
system("/applications/mplus/mplus 10.5\ -\ Analyze\ FCS\ Imputations.inp")
system2("/applications/mplus/mplus 10.5\ -\ Analyze\ FCS\ Imputations.inp")
imputations <- 100
bootsamples <- 500
numsamples <- imputations * bootsamples
# set working directory and read data
fdir::set()
mplusresults <- scan("mi.bootstrap.estimates.dat")
est <- t(matrix(mplusresults, nrow = length(mplustext)/numsamples, ncol = numsamples))
est <- t(matrix(mplusresults, ncol = numsamples))
est <- t(matrix(mplusresults, nrow = length(mplusresults)/numsamples, ncol = numsamples))
length(mplusresults)
imputations <- 100
bootsamples <- 500
numsamples <- imputations * bootsamples
# set working directory and read data
fdir::set()
mplusresults <- scan("mi.bootstrap.estimates.dat")
est <- t(matrix(mplusresults, ncol = numsamples))
head(est)
est <- t(matrix(mplusresults, ncol = numsamples))[,c(6,4,5,9)]
head(est)
colMeans(est)
mplusresults <- scan("mi.bootstrap.estimates.dat")
est <- t(matrix(mplusresults, ncol = numsamples))
a <- est[,6]
b <- est[,4]
c <- est[,5]
ab <- est[,9]
est <- cbind(a,b,c, ab)
colMeans(est)
a <- est[,5]
b <- est[,3]
c <- est[,4]
ab <- est[,8]
est <- cbind(a,b,c, ab)
colMeans(est)
fdir::set()
mplusresults <- scan("mi.bootstrap.estimates.dat")
est <- t(matrix(mplusresults, ncol = numsamples))[,c(5,3,4,8)]
names(est) <- c("apath","bpath","cpath","indirect")
pooled <- colMeans(est)
pooled
est <- t(matrix(mplusresults, ncol = numsamples))
head(est)
colMeans(est)
options(scipen = 999)
colMeans(est)
mplusresults <- scan("mi.bootstrap.estimates.dat")
est <- t(matrix(mplusresults, ncol = numsamples))[,c(6,4,5,9)]
names(est) <- c("apath","bpath","cpath","indirect")
colMeans(est)
mplusresults <- scan("mi.bootstrap.estimates.dat")
est <- t(matrix(mplusresults, ncol = numsamples))[,c(6,4,5,9)]
names(est) <- c("apath","bpath","cpath","indirect")
pooled <- colMeans(est)
pooled
biasadj <- function(est, pooled){
below <- rep(0, length(est))
below[est < pooled] <- 1
z0 <- qnorm(mean(below))
p1 <- pnorm(2*z0 + qnorm(.025))
p2 <- pnorm(2*z0 + qnorm(.975))
cl <- quantile(est, c(p1,p2))
results <- c(pooled,mean(est),mean(below),z0,p1,p2,cl)
names(results) <- c("pooled","estboot","pbelow","z0","p1","p2","lcl","ucl")
return(results)
}
# bias-adjusted bootstrap
acl <- biasadj(est[,1],pooled[1])
acl <- biasadj(est[,1],pooled[1])
bcl <- biasadj(est[,2],pooled[2])
ccl <- biasadj(est[,3],pooled[3])
abcl <- biasadj(est[,4],pooled[4])
bctable <- round(rbind(acl,bcl,ccl,abcl), digits = 3)
bctable
pctable <- round(cbind(bctable[,1], rbind(quantile(a, c(.025, .975)), quantile(b, c(.025, .975)), quantile(c, c(.025, .975)), quantile(ab, c(.025, .975)))), digits = 3)
pctable
mplusresults <- scan("mi.bootstrap.estimates.dat")
est <- t(matrix(mplusresults, ncol = numsamples))[,c(6,4,5,9)]
pooled <- colMeans(est)
names(est) <- pooled <- c("apath","bpath","cpath","indirect")
acl <- biasadj(est[,1],pooled[1])
bcl <- biasadj(est[,2],pooled[2])
ccl <- biasadj(est[,3],pooled[3])
abcl <- biasadj(est[,4],pooled[4])
bctable <- round(rbind(acl,bcl,ccl,abcl), digits = 3)
bctable
quantile(est$a, c(.025, .975)
)
quantile(est[,a], c(.025, .975))
quantile(est[,apath], c(.025, .975))
mplusresults <- scan("mi.bootstrap.estimates.dat")
est <- t(matrix(mplusresults, ncol = numsamples))[,c(6,4,5,9)]
names(est) <- c("apath","bpath","cpath","indirect")
pooled <- colMeans(est)
quantile(est[,apath], c(.025, .975))
View(est)
names(est) <- c("apath","bpath","cpath","indirect")
View(est)
colnames(est) <- c("apath","bpath","cpath","indirect")
View(est)
mplusresults <- scan("mi.bootstrap.estimates.dat")
est <- t(matrix(mplusresults, ncol = numsamples))[,c(6,4,5,9)]
colnames(est) <- c("apath","bpath","cpath","indirect")
pooled <- colMeans(est)
pooled
biasadj <- function(est, pooled){
below <- rep(0, length(est))
below[est < pooled] <- 1
z0 <- qnorm(mean(below))
p1 <- pnorm(2*z0 + qnorm(.025))
p2 <- pnorm(2*z0 + qnorm(.975))
cl <- quantile(est, c(p1,p2))
results <- c(pooled,mean(est),mean(below),z0,p1,p2,cl)
names(results) <- c("pooled","estboot","pbelow","z0","p1","p2","lcl","ucl")
return(results)
}
a.cl <- biasadj(est[,1],pooled[1])
b.cl <- biasadj(est[,2],pooled[2])
c.cl <- biasadj(est[,3],pooled[3])
ab.cl <- biasadj(est[,4],pooled[4])
bctable <- round(rbind(a.cl,b.cl,c.cl,ab.cl), digits = 3)
bctable
quantile(est[,apath], c(.025, .975))
est[,apath]
quantile(est, c(.025, .975)
)
quantile(est[,1], c(.025, .975))
quantile(est$apath, c(.025, .975))
pctable <- round(cbind(bctable[,1], rbind(quantile(est[,1], c(.025, .975)), quantile(est[,2], c(.025, .975)), quantile(est[,3], c(.025, .975)), quantile(est[,4], c(.025, .975)))), digits = 3)
pctable
imputations <- 100
bootsamples <- 500
numsamples <- imputations * bootsamples
# set working directory and read data
fdir::set()
mplusresults <- scan("mi.bootstrap.estimates.dat")
est <- t(matrix(mplusresults, ncol = numsamples))[,c(6,4,5,9)]
colnames(est) <- c("apath","bpath","cpath","indirect")
pooled <- colMeans(est)
# bias-adjusted bootstrap function
biasadj <- function(est, pooled){
below <- rep(0, length(est))
below[est < pooled] <- 1
z0 <- qnorm(mean(below))
p1 <- pnorm(2*z0 + qnorm(.025))
p2 <- pnorm(2*z0 + qnorm(.975))
cl <- quantile(est, c(p1,p2))
results <- c(pooled,mean(est),mean(below),z0,p1,p2,cl)
names(results) <- c("pooled","estboot","pbelow","z0","p1","p2","lcl","ucl")
return(results)
}
# bias-adjusted bootstrap
a.cl <- biasadj(est[,1],pooled[1])
b.cl <- biasadj(est[,2],pooled[2])
c.cl <- biasadj(est[,3],pooled[3])
ab.cl <- biasadj(est[,4],pooled[4])
bctable <- round(rbind(a.cl,b.cl,c.cl,ab.cl), digits = 3)
# percentile bootstrap
pctable <- round(cbind(bctable[,1], rbind(quantile(est[,1], c(.025, .975)), quantile(est[,2], c(.025, .975)), quantile(est[,3], c(.025, .975)), quantile(est[,4], c(.025, .975)))), digits = 3)
bctable
pctable
