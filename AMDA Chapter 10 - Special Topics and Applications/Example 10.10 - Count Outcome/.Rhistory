for(v in 2:ncol(sds)){
psr <- max(do.call(cbind, modlist[[v]]@psr)[20,], na.rm = T)
singleton_list <- which(singleton[,v] == T)
dat_tmp <- dat[!dat[,'id'] %in% singleton_list, ]
id_tmp <- dat_tmp$id
if(excludesd0 == 1){
exclusion_list <- sds[which(sds[,v] == 0),1]
dat_tmp <- dat_tmp[!dat_tmp[,'id'] %in% exclusion_list, ]
id_tmp <- dat_tmp$id
sds_tmp <- aggregate(dat_tmp[-1], by = list(id_tmp), FUN = sd, na.rm = T)
numzerosd[v-1] <- sum(sds_tmp[,v] == 0, na.rm = T)
} else{}
maxpct[v-1] <- max(table(dat_tmp[,v]) / sum(table(dat_tmp[,v])) * 100)
J[v-1] <- length(unique(dat_tmp$id))
nj[v-1] <- mean(aggregate(!is.na(dat_tmp[,v]), by = list(id_tmp), FUN = sum)$x)
}
J <- nj <- maxpct <- rep(0,length(numzerosd))
for(v in 2:ncol(sds)){
psr <- max(do.call(cbind, modlist[[v-1]]@psr)[20,], na.rm = T)
singleton_list <- which(singleton[,v] == T)
dat_tmp <- dat[!dat[,'id'] %in% singleton_list, ]
id_tmp <- dat_tmp$id
if(excludesd0 == 1){
exclusion_list <- sds[which(sds[,v] == 0),1]
dat_tmp <- dat_tmp[!dat_tmp[,'id'] %in% exclusion_list, ]
id_tmp <- dat_tmp$id
sds_tmp <- aggregate(dat_tmp[-1], by = list(id_tmp), FUN = sd, na.rm = T)
numzerosd[v-1] <- sum(sds_tmp[,v] == 0, na.rm = T)
} else{}
maxpct[v-1] <- max(table(dat_tmp[,v]) / sum(table(dat_tmp[,v])) * 100)
J[v-1] <- length(unique(dat_tmp$id))
nj[v-1] <- mean(aggregate(!is.na(dat_tmp[,v]), by = list(id_tmp), FUN = sum)$x)
}
# organize info
info <- cbind(scalepts, likert, numzerosd, J, nj, maxpct, datindex, psr)
info
# sample sizes
J <- nj <- maxpct <- psr <- rep(0,length(numzerosd))
for(v in 2:ncol(sds)){
psr[v-1] <- max(do.call(cbind, modlist[[v-1]]@psr)[20,], na.rm = T)
singleton_list <- which(singleton[,v] == T)
dat_tmp <- dat[!dat[,'id'] %in% singleton_list, ]
id_tmp <- dat_tmp$id
if(excludesd0 == 1){
exclusion_list <- sds[which(sds[,v] == 0),1]
dat_tmp <- dat_tmp[!dat_tmp[,'id'] %in% exclusion_list, ]
id_tmp <- dat_tmp$id
sds_tmp <- aggregate(dat_tmp[-1], by = list(id_tmp), FUN = sd, na.rm = T)
numzerosd[v-1] <- sum(sds_tmp[,v] == 0, na.rm = T)
} else{}
maxpct[v-1] <- max(table(dat_tmp[,v]) / sum(table(dat_tmp[,v])) * 100)
J[v-1] <- length(unique(dat_tmp$id))
nj[v-1] <- mean(aggregate(!is.na(dat_tmp[,v]), by = list(id_tmp), FUN = sum)$x)
}
# organize info
info <- cbind(scalepts, likert, numzerosd, J, nj, maxpct, datindex, psr)
info
v=2
modlist[[v-1]]@estimates
typeof(modlist[[v-1]]@estimates)
(modlist[[v-1]]@estimates)[,6]
max((modlist[[v-1]]@estimates)[,6], na.rm = T)
min((modlist[[v-1]]@estimates)[,6], na.rm = T)
J <- nj <- maxpct <- psr <- neffmin <- rep(0,length(numzerosd))
for(v in 2:ncol(sds)){
psr[v-1] <- max(do.call(cbind, modlist[[v-1]]@psr)[20,], na.rm = T)
neffmin[v-1] <- min((modlist[[v-1]]@estimates)[,6], na.rm = T)
singleton_list <- which(singleton[,v] == T)
dat_tmp <- dat[!dat[,'id'] %in% singleton_list, ]
id_tmp <- dat_tmp$id
if(excludesd0 == 1){
exclusion_list <- sds[which(sds[,v] == 0),1]
dat_tmp <- dat_tmp[!dat_tmp[,'id'] %in% exclusion_list, ]
id_tmp <- dat_tmp$id
sds_tmp <- aggregate(dat_tmp[-1], by = list(id_tmp), FUN = sd, na.rm = T)
numzerosd[v-1] <- sum(sds_tmp[,v] == 0, na.rm = T)
} else{}
maxpct[v-1] <- max(table(dat_tmp[,v]) / sum(table(dat_tmp[,v])) * 100)
J[v-1] <- length(unique(dat_tmp$id))
nj[v-1] <- mean(aggregate(!is.na(dat_tmp[,v]), by = list(id_tmp), FUN = sum)$x)
}
# organize info
info <- cbind(scalepts, likert, numzerosd, J, nj, maxpct, datindex, psr, neffmin)
info
# get auxiliary info for each variable
getinfo <- function(data, modlist, varlist, excludesd0, datindex){
# modlist = KO_list
# data = KO
# varlist = KO_varnames
# excludesd0 = 0
# datindex = 7
dat <- data[,c('id',varlist)]
# number of scale points
getcolMin <- function(data) sapply(data, min, na.rm = TRUE)
getcolMax <- function(data) sapply(data, max, na.rm = TRUE)
maxs <- getcolMax(dat[-1])
mins <- getcolMin(dat[-1])
scalepts <- maxs - mins + 1
likert <- scalepts <= 7
# number of clusters with no variation or only one observation
sds <- aggregate(dat[-1], by = list(data[,'id']), FUN = sd, na.rm = T)
singleton <- is.na(sds)
numzerosd <- colSums(sds[-1] == 0, na.rm = T)
# sample sizes
J <- nj <- maxpct <- psr <- neffmin <- rep(0,length(numzerosd))
for(v in 2:ncol(sds)){
psr[v-1] <- max(do.call(cbind, modlist[[v-1]]@psr)[20,], na.rm = T)
neffmin[v-1] <- min((modlist[[v-1]]@estimates)[,6], na.rm = T)
singleton_list <- which(singleton[,v] == T)
dat_tmp <- dat[!dat[,'id'] %in% singleton_list, ]
id_tmp <- dat_tmp$id
if(excludesd0 == 1){
exclusion_list <- sds[which(sds[,v] == 0),1]
dat_tmp <- dat_tmp[!dat_tmp[,'id'] %in% exclusion_list, ]
id_tmp <- dat_tmp$id
sds_tmp <- aggregate(dat_tmp[-1], by = list(id_tmp), FUN = sd, na.rm = T)
numzerosd[v-1] <- sum(sds_tmp[,v] == 0, na.rm = T)
} else{}
maxpct[v-1] <- max(table(dat_tmp[,v]) / sum(table(dat_tmp[,v])) * 100)
J[v-1] <- length(unique(dat_tmp$id))
nj[v-1] <- mean(aggregate(!is.na(dat_tmp[,v]), by = list(id_tmp), FUN = sum)$x)
}
# organize info
info <- cbind(scalepts, likert, numzerosd, J, nj, maxpct, datindex, psr, neffmin)
return(info)
}
info <- rbind(getinfo(HBAP,HBAP_list,HBAP_varnames,0,1),
getinfo(ATN,ATN_list,ATN_varnames,0,2),
getinfo(AMIB,AMIB_list,AMIB_varnames,0,3),
getinfo(AMIB2,AMIB2_list,AMIB2_varnames,0,4),
getinfo(AMIBINT,AMIBINT_list,AMIBINT_varnames,0,5),
getinfo(AMIBINT2,AMIBINT2_list,AMIBINT2_varnames,0,6),
getinfo(KO,KO_list,KO_varnames,0,7)
)
eHBAP_varnames
eHBAP_list
einfo <- rbind(getinfo(HBAP,eHBAP_list,HBAP_varnames,1,1),
getinfo(ATN,eATN_list,ATN_varnames,1,2),
getinfo(AMIB,eAMIB_list,AMIB_varnames,1,3),
getinfo(AMIB2,eAMIB2_list,AMIB2_varnames,1,4),
getinfo(AMIBINT,eAMIBINT_list,AMIBINT_varnames,1,5),
getinfo(AMIBINT2,eAMIBINT2_list,AMIBINT2_varnames,1,6),
getinfo(KO,eKO_list,KO_varnames,1,7)
)
var_results <- as.data.frame(cbind(var_results,info))
evar_results <- as.data.frame(cbind(evar_results,einfo))
var_results$datindex <- as.factor(var_results$datindex)
evar_results$datindex <- as.factor(evar_results$datindex)
levels(var_results$datindex) <- levels(evar_results$datindex) <- c('HBAP','ATN','AMIB','AMIB2','AMIBINT','AMIBINT2','KO')
var_results_sorted <- var_results[order(var_results$var_log),]
evar_results_sorted <- evar_results[order(evar_results$var_log),]
evar_results
var_results
hist(AMIB$AMIB_se)
AMIB$AMIB_se
table(AMIB$AMIB_se)
AMIB$AMIB_se
AMIB$se
table(AMIB$se)
AMIB_list[['AMIB_se']]
AMIB_list[['AMIB_se']]@output
var <- 'AMIB_se'
name <- 'AMIB SE'
modindex <- which(grepl(var, allmod_names))
nimps <- 10
include_imps <- exclude_imps <- NULL
for(i in 1:nimps){
include_tmp <- aggregate(model_list[[modindex]]@latent[[i]], by = list(model_list[[modindex]]@imputations[[i]]$id), FUN = mean)
include_imps <- rbind(include_imps,include_tmp)
exclude_tmp <- aggregate(emodel_list[[modindex]]@latent[[i]], by = list(emodel_list[[modindex]]@imputations[[i]]$id), FUN = mean)
exclude_imps <- rbind(exclude_imps,exclude_tmp)
}
colnames(include_imps) <- colnames(exclude_imps) <- c('id','logvarj','logmeanj')
noex <- cbind(0,include_imps$logvarj)
ex <- cbind(1, exclude_imps$logvarj)
ex_levels <- as.data.frame(rbind(noex,ex))
colnames(ex_levels) <- c('exclude','logvarj')
ex_levels$exclude <- as.factor(ex_levels$exclude)
levels(ex_levels$exclude) <- c(paste0('a) Include People With iSD = 0 (Var. of Logs = ', c(round(var_results[modindex,2],2)), ')'),
paste0('b) Exclude People With iSD = 0 (Var. of Logs = ', c(round(evar_results[modindex,2],2)), ')'))
ggplot(ex_levels, aes(x = logvarj, colour = exclude, y = ..density..)) + geom_histogram(bins = 40) + theme_classic(base_size = 18) +
theme(legend.position = 'none') +
facet_wrap(~ exclude) +
scale_x_continuous(limits = c(-4,2)) +
# scale_x_continuous(limits = c(-4,5)) +
scale_colour_manual(values = set1_colors[1:3]) +
# annotate('text', x = -2.5, y = .7, label = 'a) Variance = X.XX', color = 'black', size = 5) +
labs(
title = paste0('FIGURE 3. Random Effect Distributions of the ', name),
x = 'Random Effect Estimates (Logarithm of Intraindividual Variance)',
y = 'Density'
)
# remotes::install_github('blimp-stats/rblimp')
library(fdir)
library(rblimp)
library(ggplot2)
library(RColorBrewer)
# display.brewer.pal(n = 8, name = 'Dark2')
set1_colors <- brewer.pal(4, "Dark2")
options(scipen = 999)
options(max.print = .Machine$integer.max)
set()
# remotes::install_github('blimp-stats/rblimp')
library(fdir)
library(rblimp)
library(ggplot2)
library(RColorBrewer)
# display.brewer.pal(n = 8, name = 'Dark2')
set1_colors <- brewer.pal(4, "Dark2")
options(scipen = 999)
options(max.print = .Machine$integer.max)
set()
######################################################
# READ DATA
######################################################
KO <- as.data.frame(read.table('./Catalog Variances/KO Data/KOdiary2l.dat', na.strings = c('999','999.00','999.0')))
colnames(KO) <- c('id','day','time','painint','sleep','drinks','happy','angry','enthuis','upset',
'alert','fearful','relaxed','nervous','imp_wrkgl','opp_wrkgl','hvplan_wrkgl','imp_lifgl',
'opp_lifgl','hvplan_lifgl','prog_wrkgl','eff_wrkgl','time_wrkgl','rewrd_wrkgl','crit_wrkgl',
'trak_wrkgl','pland_wrkgl','help_wrkgl','hindr_wrkgl','frust_wrkgl','pint_wrkgl','disap_wrkgl',
'frust2_wrkgl','expct_wrkgl','illpvt_wrkgl','enrgpvt_wrkgl','opptpvt_wrkgl','pplpvt_wrkgl',
'evntpvt_wrkgl','supppvt_wrkgl','busypvt_wrkgl','painpvt_wrkgl','prog_lifgl',
'eff_lifgl','time_lifgl','rewrd_lifgl','crit_lifgl','trak_lifgl','pland_lifgl',
'pint_lifgl','illpvt_lifgl','enrgpvt_lifgl','opptpvt_lifgl','pplpvt_lifgl','evntpvt_lifgl',
'supppvt_lifgl','busypvt_lifgl','painpvt_lifgl','help_lifgl','hindr_lifgl','frust_lifgl',
'disap_lifgl','frust2_lifgl','expct_lifgl','posaff','negaff')
summary(KO)
describe(KO)
dat = KO
clusterid = 'id'
dv = 'upset'
mcmc_burn = 20000
mcmc_iter = 20000
minlogvar = -3
excludesd0 = 0
nimps <- 10
if(sd(dat[,dv], na.rm = T) < 1){
dat[,dv] <- dat[,dv] * 10
}
if(sd(dat[,dv], na.rm = T) > 200){
dat[,dv] <- dat[,dv] / 100
}
# exclude singleton clusters
sds <- aggregate(dat[,dv], by = list(dat[,clusterid]), FUN = sd, na.rm = T)[,-1]
singleton <- is.na(sds)
singleton_list <- which(singleton == T)
dat <- dat[!dat[,'id'] %in% singleton_list, ]
if(excludesd0 == 1){
sds <- aggregate(dat[,dv], by = list(dat[,clusterid]), FUN = sd, na.rm = T)
num_zeros <- sum(sds == 0)
exclusion_list <- sds[which(sds[,2] == 0),1]
dat <- dat[!dat[,clusterid] %in% exclusion_list, ]
}
onepart <- rblimp(
data = dat,
clusterid = clusterid,
transform = paste0('y = ', dv, ';'),
latent = paste0(clusterid, ' = mean_j lnvar_j'),
model =
'mean_j ~ 1;
lnvar_j ~ 1@lnvar_mu;
y ~ 1@mean_j;
var(y) ~ 1@lnvar_j;
mean_j ~~ lnvar_j;',
seed = 90291,
burn = mcmc_burn,
iter = mcmc_iter,
chains = nimps,
nimps = nimps,
parameters = paste0(
'icc = mean_j.totalvar / (mean_j.totalvar + exp(lnvar_mu));
var_med = exp(lnvar_mu);
var_mean = exp(lnvar_mu + lnvar_j.totalvar/2);
DEBUG: allow_tune_fail; logvar_truncate = ', minlogvar),
options = 'listwise',
print_output = 'all')
KO$upset_bin <- ifelse(KO$upset > 0, 1, 0)
summary(KO)
KO$upset_nor <- ifelse(KO$upset_bin == 0, NA, KO$upset)
table(KO$upset_bin, KO$upset)
table(KO$upset_bin, KO$upset_nor)
paste0('y = ', dv, ';')
c(paste0('y = ', dv, ';'),paste0('ybin = ', dv, '_bin;'))
c(paste0('ynor = ', dv, '_nor;'),paste0('ybin = ', dv, '_bin;'))
twopart <- rblimp(
data = dat,
clusterid = clusterid,
ordinal = 'ybin',
transform = c(paste0('y = ', dv, '_nor;'),paste0('ybin = ', dv, '_bin;')),
latent = paste0(clusterid, ' = mean_j lnvar_j ybin_j'),
model =
'mean_j ~ 1;
lnvar_j ~ 1@lnvar_mu;
y ~ 1@mean_j;
var(y) ~ 1@lnvar_j;
mean_j ~~ lnvar_j;
ybin_j ~ 1;
ybin ~ 1@ybin_j;
ybin_j ~~ mean_j lnvar_j;',
seed = 90291,
burn = mcmc_burn,
iter = mcmc_iter,
chains = nimps,
nimps = nimps,
parameters = paste0(
'icc = mean_j.totalvar / (mean_j.totalvar + exp(lnvar_mu));
var_med = exp(lnvar_mu);
var_mean = exp(lnvar_mu + lnvar_j.totalvar/2);
DEBUG: allow_tune_fail; logvar_truncate = ', minlogvar),
options = 'listwise',
print_output = 'all')
KO$upset_bin <- ifelse(KO$upset > 0, 1, 0)
KO$upset_nor <- ifelse(KO$upset_bin == 0, NA, KO$upset)
dat = KO
clusterid = 'id'
dv = 'upset'
mcmc_burn = 20000
mcmc_iter = 20000
minlogvar = -3
excludesd0 = 0
twopart <- rblimp(
data = dat,
clusterid = clusterid,
ordinal = 'ybin',
transform = c(paste0('y = ', dv, '_nor;'),paste0('ybin = ', dv, '_bin;')),
latent = paste0(clusterid, ' = mean_j lnvar_j ybin_j'),
model =
'mean_j ~ 1;
lnvar_j ~ 1@lnvar_mu;
y ~ 1@mean_j;
var(y) ~ 1@lnvar_j;
mean_j ~~ lnvar_j;
ybin_j ~ 1;
ybin ~ 1@ybin_j;
ybin_j ~~ mean_j lnvar_j;',
seed = 90291,
burn = mcmc_burn,
iter = mcmc_iter,
chains = nimps,
nimps = nimps,
parameters = paste0(
'icc = mean_j.totalvar / (mean_j.totalvar + exp(lnvar_mu));
var_med = exp(lnvar_mu);
var_mean = exp(lnvar_mu + lnvar_j.totalvar/2);
DEBUG: allow_tune_fail; logvar_truncate = ', minlogvar),
options = 'listwise',
print_output = 'all')
summary(KO)
dv
c(paste0('y = ', dv, '_nor;'),paste0('ybin = ', dv, '_bin;'))
sd(dat[,dv], na.rm = T)
# exclude singleton clusters
sds <- aggregate(dat[,dv], by = list(dat[,clusterid]), FUN = sd, na.rm = T)[,-1]
singleton <- is.na(sds)
singleton_list <- which(singleton == T)
dat <- dat[!dat[,'id'] %in% singleton_list, ]
summary(KO)
dat
head(dat)
table(KO$upset_bin)
twopart <- rblimp(
data = dat,
clusterid = clusterid,
ordinal = 'ybin',
# transform = c(paste0('y = ', dv, '_nor;'),paste0('ybin = ', dv, '_bin;')),
transform = 'y = upset_nor; ybin = upset_bin;',
latent = paste0(clusterid, ' = mean_j lnvar_j ybin_j'),
model =
'mean_j ~ 1;
lnvar_j ~ 1@lnvar_mu;
y ~ 1@mean_j;
var(y) ~ 1@lnvar_j;
mean_j ~~ lnvar_j;
ybin_j ~ 1;
ybin ~ 1@ybin_j;
ybin_j ~~ mean_j lnvar_j;',
seed = 90291,
burn = mcmc_burn,
iter = mcmc_iter,
chains = nimps,
nimps = nimps,
parameters = paste0(
'icc = mean_j.totalvar / (mean_j.totalvar + exp(lnvar_mu));
var_med = exp(lnvar_mu);
var_mean = exp(lnvar_mu + lnvar_j.totalvar/2);
DEBUG: allow_tune_fail; logvar_truncate = ', minlogvar),
options = 'listwise',
print_output = 'all')
clusterid
twopart <- rblimp(
data = dat,
clusterid = clusterid,
# transform = c(paste0('y = ', dv, '_nor;'),paste0('ybin = ', dv, '_bin;')),
transform = 'y = upset_nor; ybin = upset_bin;',
ordinal = 'ybin',
latent = paste0(clusterid, ' = mean_j lnvar_j ybin_j'),
model =
'mean_j ~ 1;
lnvar_j ~ 1@lnvar_mu;
y ~ 1@mean_j;
var(y) ~ 1@lnvar_j;
mean_j ~~ lnvar_j;
ybin_j ~ 1;
ybin ~ 1@ybin_j;
ybin_j ~~ mean_j lnvar_j;',
seed = 90291,
burn = mcmc_burn,
iter = mcmc_iter,
chains = nimps,
nimps = nimps,
parameters = paste0(
'icc = mean_j.totalvar / (mean_j.totalvar + exp(lnvar_mu));
var_med = exp(lnvar_mu);
var_mean = exp(lnvar_mu + lnvar_j.totalvar/2);
DEBUG: allow_tune_fail; logvar_truncate = ', minlogvar),
options = 'listwise',
print_output = 'all')
twopart <- rblimp(
data = KO,
clusterid = 'id',
# transform = c(paste0('y = ', dv, '_nor;'),paste0('ybin = ', dv, '_bin;')),
# transform = 'y = upset_nor; ybin = upset_bin;',
ordinal = 'upset_bin',
latent = paste0(clusterid, ' = mean_j lnvar_j ybin_j'),
model =
'mean_j ~ 1;
lnvar_j ~ 1@lnvar_mu;
upset_nor ~ 1@mean_j;
var(upset_nor) ~ 1@lnvar_j;
mean_j ~~ lnvar_j;
ybin_j ~ 1;
upset_bin ~ 1@ybin_j;
ybin_j ~~ mean_j lnvar_j;',
seed = 90291,
burn = mcmc_burn,
iter = mcmc_iter,
chains = nimps,
nimps = nimps,
parameters = paste0(
'icc = mean_j.totalvar / (mean_j.totalvar + exp(lnvar_mu));
var_med = exp(lnvar_mu);
var_mean = exp(lnvar_mu + lnvar_j.totalvar/2);
DEBUG: allow_tune_fail; logvar_truncate = ', minlogvar),
options = 'listwise',
print_output = 'all')
table(dat$upset_bin)
c(paste0('y = ', dv, '_nor;'),paste0('ybin = ', dv, '_bin;'))
twopart <- rblimp(
data = dat,
clusterid = 'id',
transform = c(paste0('y = ', dv, '_nor;'),paste0('ybin = ', dv, '_bin;')),
# transform = 'y = upset_nor; ybin = upset_bin;',
ordinal = 'ybin',
latent = paste0(clusterid, ' = mean_j lnvar_j ybin_j'),
model =
'mean_j ~ 1;
lnvar_j ~ 1@lnvar_mu;
y ~ 1@mean_j;
var(y) ~ 1@lnvar_j;
mean_j ~~ lnvar_j;
ybin_j ~ 1;
ybin ~ 1@ybin_j;
ybin_j ~~ mean_j lnvar_j;',
seed = 90291,
burn = mcmc_burn,
iter = mcmc_iter,
chains = nimps,
nimps = nimps,
parameters = paste0(
'icc = mean_j.totalvar / (mean_j.totalvar + exp(lnvar_mu));
var_med = exp(lnvar_mu);
var_mean = exp(lnvar_mu + lnvar_j.totalvar/2);
DEBUG: allow_tune_fail; logvar_truncate = ', minlogvar),
# options = 'listwise',
print_output = 'all')
onepart@output
onepart <- rblimp(
data = dat,
clusterid = clusterid,
transform = paste0('y = ', dv, ';'),
latent = paste0(clusterid, ' = mean_j lnvar_j'),
model =
'mean_j ~ 1;
lnvar_j ~ 1@lnvar_mu;
yjt(y-1) ~ 1@mean_j;
var(y) ~ 1@lnvar_j;
mean_j ~~ lnvar_j;',
seed = 90291,
burn = mcmc_burn,
iter = mcmc_iter,
chains = nimps,
nimps = nimps,
parameters = paste0(
'icc = mean_j.totalvar / (mean_j.totalvar + exp(lnvar_mu));
var_med = exp(lnvar_mu);
var_mean = exp(lnvar_mu + lnvar_j.totalvar/2);
DEBUG: allow_tune_fail; logvar_truncate = ', minlogvar),
options = 'listwise',
print_output = 'all')
fdir::set()
dat <- read.table('alcoholuse.dat', na.strings = '999')
dat <- read.table('alcoholuse.dat', na.strings = '999', col.names = c('id','male','age','ethnicity','college','cigage','alcage','alcdays','cigdays','drinker'))
View(dat)
table(dat$alcdays)
hist(dat$alcdays)
dat$alcdays_bin <- ifelse(dat$alcdays > 0, 1, 0)
dat$alcdays_cnt <- ifelse(dat$alcdays == 0, NA, dat$alcdays)
dat[is.na] <- 999
dat[is.na(dat)] <- 999
View(dat)
write.csv(dat, 'alcoholuse2pt.dat')
write.csv(dat, 'alcoholuse2pt.dat', row.names = F)
