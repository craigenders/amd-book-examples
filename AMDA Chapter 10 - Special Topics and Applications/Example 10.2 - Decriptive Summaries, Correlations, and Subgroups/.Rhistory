educ.table
chiquares <- rep(0,100)
for(m in 1:100){
tab <- xtabs(~ pain + male, data = imps[imps$Imputation == m,])
chiquares[m] <- as.numeric(summary(tab)[3])
}
computeD2(chiquares,2)
library(dplyr)
library(mice)
library(psych)
library(rlist)
library(miceadds)
implist.mids <- as.mids(imps0)
implist.mids <- as.mids(imps0, .imp = "Imputation")
descriptives <- pool.descriptives(implist = implist,
variables = c("age", "workhrs", "exercise", "anxiety", "stress", "control", "interfere", "depress", "disability")
)
descriptives
descriptives <- pool.descriptives(implist = implist.mids,
variables = c("age", "workhrs", "exercise", "anxiety", "stress", "control", "interfere", "depress", "disability")
)
descriptives
vars2summarize <- c("age", "workhrs", "exercise", "anxiety", "stress", "control", "interfere", "depress", "disability")
descriptives <- pool.descriptives(implist = implist.mids,
variables = vars2summarize)
descriptives
poolcor <- pool.cor(implist = implist.mids,
variables = vars2summarize)
descriptives
poolcor$Untransformed
poolcor$FishersR
poolcor$FishersR_Significance_Tests
poolcor$Untransformed
poolcor$FishersR
poolcor$FishersR_Significance_Tests
# mean comparisons
implist <- as.mitml.list(split(imps, imps$imputation))
# mean comparisons
implist <- as.mitml.list(split(imps, imps$Imputation))
analysis <- with(implist, lm(age ~ male))
agediff <- testEstimates(analysis, extra.pars = T, df.com = 273)
testEstimates(analysis, extra.pars = T, df.com = 273)
exercisediff <- with(implist, lm(exercise ~ male))
testEstimates(exercisediff, extra.pars = T, df.com = 273)
implist <- as.mitml.list(split(imps, imps$Imputation))
agediff <- with(implist, lm(age ~ male))
testEstimates(agediff, extra.pars = T, df.com = 273)
workhrsdiff <- with(implist, lm(workhrs ~ male))
testEstimates(workhrsdiff, extra.pars = T, df.com = 273)
exercisediff <- with(implist, lm(exercise ~ male))
testEstimates(exercisediff, extra.pars = T, df.com = 273)
anxietydiff <- with(implist, lm(anxiety ~ male))
testEstimates(anxietydiff, extra.pars = T, df.com = 273)
stressdiff <- with(implist, lm(stress ~ male))
testEstimates(stressdiff, extra.pars = T, df.com = 273)
controldiff <- with(implist, lm(control ~ male))
testEstimates(controldiff, extra.pars = T, df.com = 273)
interferediff <- with(implist, lm(interfere ~ male))
testEstimates(interferediff, extra.pars = T, df.com = 273)
depressdiff <- with(implist, lm(depress ~ male))
testEstimates(depressdiff, extra.pars = T, df.com = 273)
disabilitydiff <- with(implist, lm(disability ~ male))
testEstimates(disabilitydiff, extra.pars = T, df.com = 273)
# create mids object
female.implist.mids <- as.mids(imps0[imps0$male == 0,], .imp = "Imputation")
imps.female <- imps0[imps0$male == 0,]
View(imps.female)
options(scipen = 999)
library(fdir)
# set working directory to the location of this script
fdir::set()
# read functions
source("pooling.functions.R")
source("pooling.chisquares.function.R")
# read stacked data (original data as imputation = 0)
imps0 <- read.table("./imps/imps.dat", na.strings = "999.0000")
names(imps0) <- c("Imputation", "id", "txgrp", "male", "age", "edugroup", "workhrs", "exercise", "paingrps",
"pain", "anxiety", "stress", "control", "depress", "interfere", "disability",
paste0("dep", seq(1:7)), paste0("int", seq(1:6)), paste0("dis", seq(1:6)))
# gender-specific data sets
imps.female <- imps0[imps0$male == 0,]
imps.male <- imps0[imps0$male == 1,]
# just the imputed data
imps <- imps0[imps0$Imputation > 0,]
# crosstabs: education by gender
col1sum <- sum(table(imps$edugroup, imps$male)[,1])
col2sum <- sum(table(imps$edugroup, imps$male)[,2])
col1pct <- (table(imps$edugroup, imps$male)[,1])/100 / col1sum * 100
col2pct <- (table(imps$edugroup, imps$male)[,2])/100 / col2sum * 100
edfreqs <- (table(imps$edugroup, imps$male))/100
educ.table <- cbind(col1pct,col2pct) * 100
# crosstabs: pain by gender
col1sum <- sum(table(imps$pain, imps$male)[,1])
col2sum <- sum(table(imps$pain, imps$male)[,2])
col1pct <- (table(imps$pain, imps$male)[,1])/100 / col1sum * 100
col2pct <- (table(imps$pain, imps$male)[,2])/100 / col2sum * 100
painfreqs <- (table(imps$pain, imps$male))/100
pain.table <- cbind(col1pct,col2pct) * 100
# print crosstab tables
colnames(pain.table) <- colnames(educ.table) <- c("female","male")
row.names(pain.table) <- c("no/mild/moderate","severe")
row.names(educ.table) <- c("less than BA","college","post-BA")
pain.table
educ.table
# pool chi-square tests (d2 statistic)
chiquares <- rep(0,100)
for(m in 1:100){
tab <- xtabs(~ pain + male, data = imps[imps$Imputation == m,])
chiquares[m] <- as.numeric(summary(tab)[3])
}
computeD2(chiquares,2)
# mean comparisons
implist <- as.mitml.list(split(imps, imps$Imputation))
agediff <- with(implist, lm(age ~ male))
testEstimates(agediff, extra.pars = T, df.com = 273)
workhrsdiff <- with(implist, lm(workhrs ~ male))
testEstimates(workhrsdiff, extra.pars = T, df.com = 273)
exercisediff <- with(implist, lm(exercise ~ male))
testEstimates(exercisediff, extra.pars = T, df.com = 273)
anxietydiff <- with(implist, lm(anxiety ~ male))
testEstimates(anxietydiff, extra.pars = T, df.com = 273)
stressdiff <- with(implist, lm(stress ~ male))
testEstimates(stressdiff, extra.pars = T, df.com = 273)
controldiff <- with(implist, lm(control ~ male))
testEstimates(controldiff, extra.pars = T, df.com = 273)
interferediff <- with(implist, lm(interfere ~ male))
testEstimates(interferediff, extra.pars = T, df.com = 273)
depressdiff <- with(implist, lm(depress ~ male))
testEstimates(depressdiff, extra.pars = T, df.com = 273)
disabilitydiff <- with(implist, lm(disability ~ male))
testEstimates(disabilitydiff, extra.pars = T, df.com = 273)
# gender-specific data sets
imps0.female <- imps0[imps0$male == 0,]
imps0.male <- imps0[imps0$male == 1,]
# create mids object
implist.mids.male <- as.mids(imps0.male, .imp = "Imputation")
implist.mids.female <- as.mids(imps0.male, .imp = "Imputation")
warnings()
descriptives <- pool.descriptives(implist = implist.mids.male,
variables = vars2summarize)
# FUNCTIONS FOR POOLING REGRESSION RESULTS #
#required packages
library(dplyr)
library(mice)
library(psych)
library(rlist)
library(miceadds)
# removes scientific notation
options(scipen = 999)
#pool descriptives from implist
pool.descriptives <- function(implist.mids,variables){
descriptives <- with(implist.mids,
expr= describe(list.cbind((mget(variables))),type = 1)
)
descriptives.analyses <- descriptives$analyses # (for sd and var pooling later)
# converting to non-excess kurtosis
for (i in 1:length(descriptives.analyses)) {
descriptives.analyses[[i]]$kurtosis <-  descriptives.analyses[[i]]$kurtosis+3
}
# pooling untranformed -- mean, median, sd, var, skew, kurt
pooled.desc <- withPool_MI(descriptives)
pooled.desc <- data.frame(mean = pooled.desc$mean,
median = pooled.desc$median,
sd = pooled.desc$sd,
var = var_transform(descriptives.analyses)[,1],
skew = pooled.desc$skew,
kurtosis = pooled.desc$kurtosis+3)
rownames(pooled.desc) <- rownames(withPool_MI(descriptives))
#sd descriptives transformations
transformations <- sd_transform(descriptives.analyses)
colnames(transformations) <- c("Untransformed", "Log-Transformed", "Sq.Rt-Transformed","Cube-Rt Transformed", "Inv.-Transformed")
rownames(transformations) <- variables
#variance descriptive transformations
transformations2 <- var_transform(descriptives.analyses)
colnames(transformations2) <- colnames(transformations)
rownames(transformations2) <- variables
#skewness descriptive transformations
transformations3 <- round(skew_transform(descriptives.analyses),7)
colnames(transformations3) <- colnames(transformations[,c(1,4,5)])
rownames(transformations3) <- variables
#kurtosis descriptive transformations
transformations4 <- kurt_transform(descriptives.analyses)
colnames(transformations4) <- colnames(transformations[,c(1,4,5)])
rownames(transformations4) <- variables
all.describe <- list(un.transform  = pooled.desc,
sd.transform  = transformations,
var.transform = transformations2,
skew.transform = transformations3,
kurt.transform = transformations4)
return(all.describe)
}
pool.cor <- function(implist.mids, variables){
# untransformed correlations
cormatrix <- with(implist.mids,
expr = cor(list.cbind((mget(variables))))
)
#untransformed correlation matrix
r <- withPool_MI(cormatrix)
# transformed correlations with significance tests
cor <- micombine.cor(mi.res=implist.mids, variables=variables)
# transformed correaltion matrix
r_tform   <- attr(cor, "r_matrix")
correlations <- list(Untransformed = r,
FishersR = r_tform,
FishersR_Significance_Tests = cor)
return(correlations)
}
# pool regression estimates from implist
pool.regression <- function(implist, formula){
# regression analysis
fit <- with(implist,{
lm(as.formula(formula))
})
# extract list of analysis results
fit.analyses <- fit$analyses
# pool coefficients
coef <- summary(pool(fit.analyses))
# pool regression analysis results for r, r2, sd, var
impresults <- list()
for (i in 1:length(fit.analyses)) {
impresults[[i]] <- as.data.frame(cbind(r  = sqrt(summary(fit$analyses[[i]])$r.squared), # multiple correlation
r2 = summary(fit$analyses[[i]])$r.squared, # multiple r2
sd = summary(fit$analyses[[i]])$sigma, # residual std err
var = (summary(fit$analyses[[i]])$sigma)^2 # residual var
))
}
# labeling transformation results
r <- r_transform(impresults)
colnames(r) <- c("Untransformed", "Fisher's R-Z Transformation")
rownames(r) <- c("Multiple Correlation Transformations")
r <- t(r)
r2 <- r2_transform(impresults)
colnames(r2) <- c("Untransformed", "Fisher's R-Z Transformation", "Log-Transformed", "Sq.Rt-Transformed","Cube-Rt Transformed", "Inv.-Transformed")
rownames(r2) <- c("Multiple R-Squared Transformations")
r2 <- t(r2)
sd <- sd_transform(impresults)
colnames(sd) <- c("Untransformed", "Log-Transformed", "Sq.Rt-Transformed","Cube-Rt Transformed", "Inv.-Transformed")
rownames(sd) <- c("Residual Standard Error Transformations")
sd <- t(sd)
var <- var_transform(impresults)
colnames(var) <- c("Untransformed", "Log-Transformed", "Sq.Rt-Transformed","Cube-Rt Transformed", "Inv.-Transformed")
rownames(var) <- c("Residual Variance Transformations")
var <- t(var)
all.regression <- list(coefficients      = coef,
multiple.r        = r,
multiple.r2       = r2,
residual.std.err  = sd,
residual.variance = var
)
}
# r transform (for multiple correlation)
r_transform <- function(data){
rfunc <- function(data){
# data <- impresults[[1]]
R <- data$r
fisher <- ((1/2)*(log((1+R)/(1-R))))
rinfo <- cbind(R,fisher)
#return(R[2,1])
return(rinfo)
}
rlist <- t(lapply(data, rfunc)) # lapply() instead of sapply()
r_avg <- function(rlist){
# r averages and backtransform
ravgs <- withPool_MI(rlist)
z <- ravgs[,2]
ravgs[,2] <- (exp(2*z)-1)/(exp(2*z)+1)
# names(ravgs) <- c("r", "rfisher")
return(ravgs)
}
rs <- r_avg(rlist)
return(rs)
}
# r2 transform (for multiple r2)
r2_transform <- function(data){
r2func <- function(data){
# data <- impresults[[1]]
r2 <- data$r2
R <- sqrt(r2)
fisherr2 <- ((1/2)*(log((1+R)/(1-R))))
logr2 <- log(r2)
sqrtr2 <- sqrt(r2)
cuber2 <- r2^(1/3)
invr2 <- 1/r2
r2info <- cbind(r2, fisherr2,logr2, sqrtr2, cuber2, invr2)
#return(R[2,1])
return(r2info)
}
r2list <- t(lapply(data, r2func)) # lapply() instead of sapply()
r2_avg <- function(r2list){
# sd averages and backtransform
r2avgs <- withPool_MI(r2list)
zz <- r2avgs[,2]
r2avgs[,2] <- ((exp(2*zz)-1)/(exp(2*zz)+1))^2
r2avgs[,3] <- exp(r2avgs[,3])
r2avgs[,4] <- r2avgs[,4]^2
r2avgs[,5] <- r2avgs[,5]^3
r2avgs[,6] <- 1/r2avgs[,6]
# names(r2avgs) <- c("r2", "fisherr2",'logr2', "sqrtr2", "cuber2", "invr2")
return(r2avgs)
}
r2s <- r2_avg(r2list)
return(r2s)
}
# sd transform (for descriptive sd OR residual std. err)
sd_transform <- function(data){
sdfunc <- function(data){
# data <- descriptives.analyses[[1]]
sd <- data$sd
logsd <- log(sd)
sqrtsd <- sqrt(sd)
cubesd <- sd^(1/3)
invsd <- 1/sd
sdinfo <- cbind(sd,logsd,sqrtsd,cubesd,invsd)
return(sdinfo)
}
sdlist <- t(lapply(data, sdfunc)) # lapply() instead of sapply()
sd_avg <- function(sdlist){
# sd averages and backtransform
sdavgs <- withPool_MI(sdlist)
sdavgs[,2] <- exp(sdavgs[,2])
sdavgs[,3] <- sdavgs[,3]^2
sdavgs[,4] <- sdavgs[,4]^3
sdavgs[,5] <- 1/sdavgs[,5]
# names(sdavgs) <- c("sd", "logsd", "sqrtsd", "cubesd", "invsd")
# sdavgs <- sdavgs[1:length(sdavgs),]
return(sdavgs)
}
sds <- sd_avg(sdlist)
return(sds)
}
# var transform (for descriptive var OR residual var)
var_transform <- function(data){
varfunc <- function(data){
# data <- data[[1]]
var <- (data$sd)^2
logv <- log(var)
sqrtv <- sqrt(var)
cubev <- var^(1/3)
invv <- 1/var
vinfo <- cbind(var,logv,sqrtv,cubev,invv)
return(vinfo)
}
# vlist1 <- t(lapply(descriptives.analyses, varfunc))
vlist <- t(lapply(data, varfunc)) # lapply() instead of sapply()
varavg <- function(vlist){
# var averages and backtransform
varavgs <- withPool_MI(vlist)
varavgs[,2] <- exp(varavgs[,2])
varavgs[,3] <- varavgs[,3]^2
varavgs[,4] <- varavgs[,4]^3
varavgs[,5] <- 1/varavgs[,5]
# names(sdavgs) <- c("sd", "logsd", "sqrtsd", "cubesd", "invsd")
# sdavgs <- sdavgs[1:length(sdavgs),]
return(varavgs)
}
vars <- varavg(vlist)
return(vars)
}
# skew transform (for descriptive var OR residual var)
skew_transform <- function(data){
# define cube root function for negative values
cubert <- function(x) {sign(x) * abs(x)^(1/3)}
skewfunc <- function(data){
# data <- impresults[[1]]
skew <- data$skew
cubesk <- round(cubert(skew),7)
invsk <- 1/skew
skinfo <- cbind(skew,cubesk,invsk)
return(skinfo)
}
# vlist1 <- t(lapply(descriptives.analyses, varfunc))
skewlist <- t(lapply(data, skewfunc)) # lapply() instead of sapply()
skewavg <- function(skewlist){
# var averages and backtransform
skewavgs <- withPool_MI(skewlist)
skewavgs[,2] <- skewavgs[,2]^3
skewavgs[,3] <- 1/skewavgs[,3]
# names(sdavgs) <- c("sd", "logsd", "sqrtsd", "cubesd", "invsd")
# sdavgs <- sdavgs[1:length(sdavgs),]
return(skewavgs)
}
skew <- skewavg(skewlist)
return(skew)
}
# kurtosis transform (for descriptive kurtosis)
kurt_transform <- function(data){
# define cube root function for negative values
cubert <- function(x) {sign(x) * abs(x)^(1/3)}
kurtfunc <- function(data){
# data <- impresults[[1]]
kurt <- data$kurtosis
cubek <- cubert(kurt)
invk <- 1/kurt
kinfo <- cbind(kurt,cubek,invk)
return(kinfo)
}
# vlist1 <- t(lapply(descriptives.analyses, varfunc))
kurtlist <- t(lapply(data, kurtfunc)) # lapply() instead of sapply()
kurtavg <- function(kurtlist){
# var averages and backtransform
kurtavgs <- withPool_MI(kurtlist)
kurtavgs[,2] <- kurtavgs[,2]^3
kurtavgs[,3] <- 1/kurtavgs[,3]
# names(sdavgs) <- c("sd", "logsd", "sqrtsd", "cubesd", "invsd")
# sdavgs <- sdavgs[1:length(sdavgs),]
return(kurtavgs)
}
kurt <- kurtavg(kurtlist)
return(kurt)
}
descriptives <- pool.descriptives(implist = implist.mids.male,
variables = vars2summarize)
# pooled descriptive statistics and correlations
vars2summarize <- c("age", "workhrs", "exercise", "anxiety", "stress", "control", "interfere", "depress", "disability")
descriptives <- pool.descriptives(implist = implist.mids.male,
variables = vars2summarize)
descriptives
descriptives.female <- pool.descriptives(implist = implist.mids.female,
variables = vars2summarize)
descriptives.female
poolcor <- pool.cor(implist = implist.mids.male,
variables = vars2summarize)
poolcor
corrs.female <- pool.cor(implist = implist.mids.female,
variables = vars2summarize)
corrs.female
options(scipen = 999)
library(fdir)
# set working directory to the location of this script
fdir::set()
# read functions
source("pooling.functions.R")
source("pooling.chisquares.function.R")
# read stacked data (original data as imputation = 0)
imps0 <- read.table("./imps/imps.dat", na.strings = "999.0000")
names(imps0) <- c("Imputation", "id", "txgrp", "male", "age", "edugroup", "workhrs", "exercise", "paingrps",
"pain", "anxiety", "stress", "control", "depress", "interfere", "disability",
paste0("dep", seq(1:7)), paste0("int", seq(1:6)), paste0("dis", seq(1:6)))
# gender-specific data sets
imps0.female <- imps0[imps0$male == 0,]
imps0.male <- imps0[imps0$male == 1,]
# just the imputed data
imps <- imps0[imps0$Imputation > 0,]
# crosstabs: education by gender
col1sum <- sum(table(imps$edugroup, imps$male)[,1])
col2sum <- sum(table(imps$edugroup, imps$male)[,2])
col1pct <- (table(imps$edugroup, imps$male)[,1])/100 / col1sum * 100
col2pct <- (table(imps$edugroup, imps$male)[,2])/100 / col2sum * 100
edfreqs <- (table(imps$edugroup, imps$male))/100
educ.table <- cbind(col1pct,col2pct) * 100
# crosstabs: pain by gender
col1sum <- sum(table(imps$pain, imps$male)[,1])
col2sum <- sum(table(imps$pain, imps$male)[,2])
col1pct <- (table(imps$pain, imps$male)[,1])/100 / col1sum * 100
col2pct <- (table(imps$pain, imps$male)[,2])/100 / col2sum * 100
painfreqs <- (table(imps$pain, imps$male))/100
pain.table <- cbind(col1pct,col2pct) * 100
# print crosstab tables
colnames(pain.table) <- colnames(educ.table) <- c("female","male")
row.names(pain.table) <- c("no/mild/moderate","severe")
row.names(educ.table) <- c("less than BA","college","post-BA")
pain.table
educ.table
# pool chi-square tests (d2 statistic)
chiquares <- rep(0,100)
for(m in 1:100){
tab <- xtabs(~ pain + male, data = imps[imps$Imputation == m,])
chiquares[m] <- as.numeric(summary(tab)[3])
}
computeD2(chiquares,2)
# mean comparisons
implist <- as.mitml.list(split(imps, imps$Imputation))
agediff <- with(implist, lm(age ~ male))
testEstimates(agediff, extra.pars = T, df.com = 273)
workhrsdiff <- with(implist, lm(workhrs ~ male))
testEstimates(workhrsdiff, extra.pars = T, df.com = 273)
exercisediff <- with(implist, lm(exercise ~ male))
testEstimates(exercisediff, extra.pars = T, df.com = 273)
anxietydiff <- with(implist, lm(anxiety ~ male))
testEstimates(anxietydiff, extra.pars = T, df.com = 273)
stressdiff <- with(implist, lm(stress ~ male))
testEstimates(stressdiff, extra.pars = T, df.com = 273)
controldiff <- with(implist, lm(control ~ male))
testEstimates(controldiff, extra.pars = T, df.com = 273)
interferediff <- with(implist, lm(interfere ~ male))
testEstimates(interferediff, extra.pars = T, df.com = 273)
depressdiff <- with(implist, lm(depress ~ male))
testEstimates(depressdiff, extra.pars = T, df.com = 273)
disabilitydiff <- with(implist, lm(disability ~ male))
testEstimates(disabilitydiff, extra.pars = T, df.com = 273)
# create mids object
implist.mids.male <- as.mids(imps0.male, .imp = "Imputation")
implist.mids.female <- as.mids(imps0.male, .imp = "Imputation")
# pooled descriptive statistics and correlations
vars2summarize <- c("age", "workhrs", "exercise", "anxiety", "stress", "control", "interfere", "depress", "disability")
descriptives.male <- pool.descriptives(implist = implist.mids.male,
variables = vars2summarize)
descriptives.female <- pool.descriptives(implist = implist.mids.female,
variables = vars2summarize)
corrs.male <- pool.cor(implist = implist.mids.male,
variables = vars2summarize)
corrs.female <- pool.cor(implist = implist.mids.female,
variables = vars2summarize)
# print descriptives and correlations
descriptives.male
descriptives.female
corrs.male$Untransformed
corrs.male$FishersR
corrs.male$FishersR_Significance_Tests
corrs.female$Untransformed
corrs.female$FishersR
corrs.female$FishersR_Significance_Tests
