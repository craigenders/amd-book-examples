semPaths(paste0(programs,"/10.12 - Random Intercept.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 1,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F,
label.norm = "000000000", label.prop = .90, intAtSide = T)
semPaths(paste0(programs,"/10.12 - Random Intercept.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F,
label.norm = "000000000", label.prop = .90, intAtSide = T)
par(font.main = 3, cex.main = cexvalue0, cex.axis = cexvalue0, cex.lab = cexvalue0, mar = margins)
semPaths(paste0(programs,"/10.12 - Random Intercept.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F,
label.norm = "000000000", label.prop = .90, style = "lisrel")
par(font.main = 3, cex.main = cexvalue0, cex.axis = cexvalue0, cex.lab = cexvalue0, mar = margins)
semPaths(paste0(programs,"/10.12 - Random Intercept.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = T, nCharNodes = 5, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F,
label.norm = "000000000", label.prop = .90)
par(font.main = 3, cex.main = cexvalue0, cex.axis = cexvalue0, cex.lab = cexvalue0, mar = margins)
semPaths(paste0(programs,"/10.12 - Random Intercept.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F, intStyle = "single",
label.norm = "000000000", label.prop = .90)
par(font.main = 3, cex.main = cexvalue0, cex.axis = cexvalue0, cex.lab = cexvalue0, mar = margins)
semPaths(paste0(programs,"/10.12 - Random Intercept.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F, intStyle = "multi",
label.norm = "000000000", label.prop = .90)
semPaths(paste0(programs,"/10.12 - Random Intercept.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = T,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F, intStyle = "multi",
label.norm = "000000000", label.prop = .90)
semPaths(paste0(programs,"/10.12 - Random Intercept.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F, intStyle = "single",
label.norm = "000000000", label.prop = .90)
semPaths(paste0(programs,"/10.12 - Random Intercept.out"),title=T, curvePivot = TRUE, layout = "tree2", intercepts = F,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F, intStyle = "single",
label.norm = "000000000", label.prop = .90)
par(font.main = 3, cex.main = cexvalue0, cex.axis = cexvalue0, cex.lab = cexvalue0, mar = margins)
semPaths(paste0(programs,"/10.12 - Random Intercept.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F, intStyle = "single",
label.norm = "000000000", label.prop = .90)
semPaths(paste0(programs,"/10.12 - Random Intercept.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F, sizeInt = 5,
label.norm = "000000000", label.prop = .90)
semPaths(paste0(programs,"/10.12 - Random Intercept.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F, sizeInt = 0,
label.norm = "000000000", label.prop = .90)
pdf(paste0(outputs, "Figure ", chapter, ".", figure, ".pdf"))
par(font.main = 3, cex.main = cexvalue0, cex.axis = cexvalue0, cex.lab = cexvalue0, mar = margins)
semPaths(paste0(programs,"/10.12 - Random Intercept.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F, sizeInt = 0,
label.norm = "000000000", label.prop = .90)
dev.off()
par(font.main = 3, cex.main = cexvalue0, cex.axis = cexvalue0, cex.lab = cexvalue0, mar = margins)
semPaths(paste0(programs,"/10.12 - EMP on LMX Random Intercept.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F, sizeInt = 0,
label.norm = "000000000", label.prop = .90)
par(font.main = 3, cex.main = cexvalue0, cex.axis = cexvalue0, cex.lab = cexvalue0, mar = margins)
semPaths(paste0(programs,"/10.12 - EMP on LMX Random Intercept 2.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F, sizeInt = 0,
label.norm = "000000000", label.prop = .90)
pdf(paste0(outputs, "Figure ", chapter, ".", figure, ".pdf"))
par(font.main = 3, cex.main = cexvalue0, cex.axis = cexvalue0, cex.lab = cexvalue0, mar = margins)
semPaths(paste0(programs,"/10.12 - EMP on LMX Random Intercept 2.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = T, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F, sizeInt = 0,
label.norm = "000000000", label.prop = .90)
dev.off()
par(font.main = 3, cex.main = cexvalue0, cex.axis = cexvalue0, cex.lab = cexvalue0, mar = margins)
semPaths(paste0(programs,"/10.12 - EMP on LMX Random Intercept 2.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = F, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F, sizeInt = 0,
label.norm = "000000000", label.prop = .90)
# labels
figure <- 11
text <- "MLM Model"
if(figuretitles == 2){title <- paste0("Figure ", chapter, ".", figure, ": ", text)} else if(figuretitles == 1)
{title <- paste0("Figure ", chapter, ".", figure)} else {title <- ""}
library("lavaan")
library("semPlot")
par(font.main = 3, cex.main = cexvalue0, cex.axis = cexvalue0, cex.lab = cexvalue0, mar = margins)
semPaths(paste0(programs,"/10.12 - MSEM basic decomp.out"),title=T, curvePivot = TRUE, layout = "tree", intercepts = F,
residuals = F, nCharNodes = 0, sizeLat = 8, sizeMan = 12, rotation = 4,
optimizeLatRes = T, fixedStyle = c(1), asize = 3.5, open = F, sizeInt = 0,
label.norm = "000000000", label.prop = .90)
# load packages
library(mitml)
library(lme4)
# set working directory to the location of this script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data from working directory
imps <- read.table(paste0(getwd(), "/imps.dat"))
names(imps) <- c("Imputation", "employee","team","turnover","male","empower","lmx","jobsat","climate","teamperf",
"ranicepts", "lxmmeans", "jobsatmeans")
# analysis and pooling
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "empower ~ lmx  + jobsat + climate + (1 | team)"
analysis <- with(implist, lmer(model, REML = T))
estimates <- testEstimates(analysis, var.comp = T, df.com = NULL)
estimates
confint(estimates, level = .95)
# estimate empty model with no predictors
emptymodel <- with(implist, lmer(empower ~ 1 + (1 | team)))
# compare models with wald test
testModels(analysis, emptymodel, method = "D1")
# compare models with likelihood ratio test
testModels(analysis, emptymodel, method = "D3")
# load packages
library(mitml)
library(lme4)
# set working directory to the location of this script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data from working directory
imps <- read.table(paste0(getwd(), "/imps.dat"))
names(imps) <- c("Imputation", "employee","team","turnover","male","empower","lmx","jobsat","climate","teamperf")
# analysis and pooling
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "empower ~ lmx  + jobsat + climate + (1 | team)"
analysis <- with(implist, lmer(model, REML = T))
estimates <- testEstimates(analysis, var.comp = T, df.com = NULL)
estimates
confint(estimates, level = .95)
# estimate empty model with no predictors
emptymodel <- with(implist, lmer(empower ~ 1 + (1 | team)))
# compare models with wald test
testModels(analysis, emptymodel, method = "D1")
# compare models with likelihood ratio test
testModels(analysis, emptymodel, method = "D3")
# load packages
library(mitml)
library(lme4)
library(plyr)
# set working directory to the location of this script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data from working directory
load(paste0(getwd(), "/imps.R"))
imps$team <- imps$clus
# center covariates at group and grand means
# imps <- ddply(imps, c("imputation", "team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps <- ddply(imps, c("team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps$jobsatcgm <- imps$jobsat - mean(imps$jobsat)
imps$climatecgm <- imps$climate - mean(imps$climate)
# analysis and pooling
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "empower ~ lmxcwc  + jobsatcgm + climatecgm + (lmxcwc | team)"
analysis <- with(implist, lmer(model, REML = T))
estimates <- testEstimates(analysis, var.comp = T, df.com = NULL)
estimates
confint(estimates, level = .95)
imps$team <- as.numeric(imps$clus)
imps <- ddply(imps, c("team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps$jobsatcgm <- imps$jobsat - mean(imps$jobsat)
imps$climatecgm <- imps$climate - mean(imps$climate)
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "empower ~ lmxcwc  + jobsatcgm + climatecgm + (lmxcwc | team)"
analysis <- with(implist, lmer(model, REML = T))
estimates <- testEstimates(analysis, var.comp = T, df.com = NULL)
estimates
confint(estimates, level = .95)
View(imps)
# load packages
library(mitml)
library(lme4)
library(plyr)
# set working directory to the location of this script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data from working directory
load(paste0(getwd(), "/imps.R"))
imps$team <- as.numeric(imps$clus)
# center covariates at group and grand means
# imps <- ddply(imps, c("imputation", "team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps <- ddply(imps, c("team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps$jobsatcgm <- imps$jobsat - mean(imps$jobsat)
imps$climatecgm <- imps$climate - mean(imps$climate)
# analysis and pooling
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "empower ~ lmxcwc  + jobsatcgm + climatecgm + (lmxcwc | team)"
analysis <- with(implist, lmer(model, REML = T))
# load packages
library(mitml)
library(lme4)
# set working directory to the location of this script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data from working directory
load(paste0(getwd(), "/imps.R"))
imps$team <- imps$clus
# analysis and pooling
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "empower ~ lmx  + jobsat + climate + (1 | team)"
analysis <- with(implist, lmer(model, REML = T))
estimates <- testEstimates(analysis, var.comp = T, df.com = NULL)
estimates
confint(estimates, level = .95)
# estimate empty model with no predictors
emptymodel <- with(implist, lmer(empower ~ 1 + (1 | team)))
# compare models with wald test
testModels(analysis, emptymodel, method = "D1")
# compare models with likelihood ratio test
testModels(analysis, emptymodel, method = "D3")
# load packages
library(mitml)
library(lme4)
library(plyr)
# set working directory to the location of this script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data from working directory
load(paste0(getwd(), "/imps.R"))
imps$team <- imps$clus
imps <- ddply(imps, c("team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps$jobsatcgm <- imps$jobsat - mean(imps$jobsat)
imps$climatecgm <- imps$climate - mean(imps$climate)
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "empower ~ lmxcwc  + jobsatcgm + climatecgm + (lmxcwc | team)"
analysis <- with(implist, lmer(model, REML = T))
estimates <- testEstimates(analysis, var.comp = T, df.com = NULL)
estimates
confint(estimates, level = .95)
# load packages
library(mitml)
library(lme4)
library(plyr)
# set working directory to the location of this script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data from working directory
load(paste0(getwd(), "/imps.R"))
imps$team <- imps$clus
# center covariates at group and grand means
# imps <- ddply(imps, c("imputation", "team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps <- ddply(imps, c("team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps$jobsatcgm <- imps$jobsat - mean(imps$jobsat)
imps$climatecgm <- imps$climate - mean(imps$climate)
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "empower ~ lmxcwc  + jobsatcgm + climatecgm + (lmxcwc | team)"
analysis <- with(implist, lmer(model, REML = T))
imps$team <- as.numeric(imps$clus)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data from working directory
load(paste0(getwd(), "/imps.R"))
imps$team <- as.numeric(imps$clus)
imps <- ddply(imps, c("team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps$jobsatcgm <- imps$jobsat - mean(imps$jobsat)
imps$climatecgm <- imps$climate - mean(imps$climate)
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "empower ~ lmxcwc  + jobsatcgm + climatecgm + (lmxcwc | team)"
analysis <- with(implist, lmer(model, REML = T))
estimates <- testEstimates(analysis, var.comp = T, df.com = NULL)
estimates
confint(estimates, level = .95)
imps <- imps[imps$Imputation > 0]
load(paste0(getwd(), "/imps.R"))
imps <- imps[imps$Imputation > 0]
load(paste0(getwd(), "/imps.R"))
imps <- imps[imps$Imputation > 0,]
# center covariates at group and grand means
# imps <- ddply(imps, c("imputation", "team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps <- ddply(imps, c("team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps$jobsatcgm <- imps$jobsat - mean(imps$jobsat)
imps$climatecgm <- imps$climate - mean(imps$climate)
# analysis and pooling
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "empower ~ lmxcwc  + jobsatcgm + climatecgm + (lmxcwc | team)"
analysis <- with(implist, lmer(model, REML = T))
estimates <- testEstimates(analysis, var.comp = T, df.com = NULL)
estimates
confint(estimates, level = .95)
# read data from working directory
load(paste0(getwd(), "/imps.R"))
imps <- imps[imps$Imputation > 0,]
imps$team <- as.numeric(imps$clus)
imps <- ddply(imps, c("team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps$jobsatcgm <- imps$jobsat - mean(imps$jobsat)
imps$climatecgm <- imps$climate - mean(imps$climate)
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "empower ~ lmxcwc  + jobsatcgm + climatecgm + (lmxcwc | team)"
analysis <- with(implist, lmer(model, REML = T))
estimates <- testEstimates(analysis, var.comp = T, df.com = NULL)
estimates
confint(estimates, level = .95)
# load packages
library(jomo)
# set random number seed for imputation
set.seed(90291)
# set working directory to the location of this script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data from working directory
dat <- read.table(paste0(getwd(),"/employee.dat"), sep = "")
names(dat) = c("employee", "team", "turnover", "male", "empower", "lmx", "jobsat", "climate", "teamperf")
dat[dat == 999] <- NA
# define level-1 and level-2 variables
l1vars <- c("empower","lmx","jobsat")
l2vars <- c("climate")
# joint model imputation with jomo
impdata <- jomo(dat[l1vars], Y2 = dat[l2vars], clus = dat$team, nburn = 3000, nbetween = 3000, nimp = 100, meth = "random")
save(imps, file = paste0(getwd(), "/imps.R"))
# load packages
library(mitml)
library(lme4)
library(plyr)
# set working directory to the location of this script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data from working directory
load(paste0(getwd(), "/imps.R"))
imps <- imps[imps$Imputation > 0,]
imps$team <- as.numeric(imps$clus)
# center covariates at group and grand means
# imps <- ddply(imps, c("imputation", "team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps <- ddply(imps, c("team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps$jobsatcgm <- imps$jobsat - mean(imps$jobsat)
imps$climatecgm <- imps$climate - mean(imps$climate)
# analysis and pooling
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "empower ~ lmxcwc  + jobsatcgm + climatecgm + (lmxcwc | team)"
analysis <- with(implist, lmer(model, REML = T))
estimates <- testEstimates(analysis, var.comp = T, df.com = NULL)
estimates
confint(estimates, level = .95)
# load packages
library(mitml)
library(lme4)
library(plyr)
# set working directory to the location of this script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data from working directory
load(paste0(getwd(), "/imps.R"))
imps <- imps[imps$Imputation > 0,]
imps$team <- as.numeric(imps$clus)
# center covariates at group and grand means
# imps <- ddply(imps, c("imputation", "team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps <- ddply(imps, c("team"), transform, lmxcwc = scale(lmx, center = T, scale = F))
imps$jobsatcgm <- imps$jobsat - mean(imps$jobsat)
imps$climatecgm <- imps$climate - mean(imps$climate)
# analysis and pooling
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "empower ~ lmxcwc  + jobsatcgm + climatecgm + (lmxcwc | team)"
analysis <- with(implist, lmer(model, REML = T))
estimates <- testEstimates(analysis, var.comp = T, df.com = NULL)
estimates
confint(estimates, level = .95)
# load packages
library(jomo)
# set random number seed for imputation
set.seed(90291)
# set working directory to the location of this script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data from working directory
dat <- read.table(paste0(getwd(), "/diary.dat"))
names(dat) <- c('Imputation','person','day','pain','sleep','posaff','negaff','lifgoal','female','educ','diagnoses','activity',
'painacpt','catast','stress','ran.icept','ran.slope','pain.mean','sleep.mean')
dat[dat == 999] <- NA
dat <- read.table(paste0(getwd(), "/diary.dat"))
names(dat) <- c('person','day','pain','sleep','posaff','negaff','lifgoal','female','educ','diagnoses','activity',
'painacpt','catast','stress','ran.icept','ran.slope','pain.mean','sleep.mean')
dat[dat == 999] <- NA
dat <- read.table(paste0(getwd(), "/diary.dat"))
names(dat) <- c('person','day','pain','sleep','posaff','negaff','lifgoal','female','educ','diagnoses','activity',
'painacpt','catast','stress')
dat[dat == 999] <- NA
dat$female.fac <- factor(data$female, levels = c(0,1))
l1vars <- c("posaff","pain","sleep")
l2vars <- c("female.fac","painacpt")
imps <- jomo(dat[l1vars], Y2 = dat[l2vars], clus = dat$person, nburn = 3000, nbetween = 3000, nimp = 100, meth = "random")
save(imps, file = paste0(getwd(), "/imps.R"))
# load packages
library(jomo)
# set random number seed for imputation
set.seed(90291)
# joint model imputation with jomo
imps <- jomo(dat[l1vars], Y2 = dat[l2vars], clus = dat$person, nburn = 3000, nbetween = 3000, nimp = 100, meth = "random")
View(dat)
dat$female.fac <- factor(data$female, levels = c(0,1))
l1vars <- c("posaff","pain","sleep")
l2vars <- c("female.fac","painacpt")
# define level-1 and level-2 variables
# define binary variable as factor
dat$female.fac <- factor(dat$female, levels = c(0,1))
l1vars <- c("posaff","pain","sleep")
l2vars <- c("female.fac","painacpt")
# joint model imputation with jomo
imps <- jomo(dat[l1vars], Y2 = dat[l2vars], clus = dat$person, nburn = 3000, nbetween = 3000, nimp = 100, meth = "random")
View(imps)
save(imps, file = paste0(getwd(), "/jomoimps.R"))
m <- 1
temp <- imps[imps$Imputation == m, vars]
# read data from working directory
vars <- c("Imputation","clus","pain","sleep","painacpt","female")
temp <- imps[imps$Imputation == m, vars]
vars
# read data from working directory
vars <- c("Imputation","clus","posaff","pain","sleep","painacpt","female")
# read data from working directory
vars <- c("Imputation","clus","posaff","pain","sleep","painacpt","female.fac")
temp <- imps[imps$Imputation == m, vars]
temp
imps$female <- dummy.code(imps$female.fac, group = "1")
library(psych)
library(rockchalk)
imps$female <- dummy.code(imps$female.fac, group = "1")
# read data from working directory
vars <- c("Imputation","clus","posaff","pain","sleep","painacpt","female")
temp <- imps[imps$Imputation == m, vars]
temp
temp <- gmc(temp, c("pain"), by = c("clus"), FUN = mean, suffix = c(".meanj", ".cwc"), fulldataframe = TRUE)
head(temp)
imps.copy <- imps
vars <- c("Imputation","clus","posaff","pain","sleep","painacpt","female")
imps <- NULL
for(m in 1:100){
temp <- imps.copy[imps.copy$Imputation == m, vars]
temp <- gmc(temp, c("pain"), by = c("clus"), FUN = mean, suffix = c(".meanj", ".cwc"), fulldataframe = TRUE)
imps = rbind(imps,temp)
}
names(imps) <- c("Imputation","person","posaff","pain","sleep","painacpt","female","pain.mean","pain.cwc")
imps$sleep <- imps$sleep - mean(imps$sleep)
imps$pain.mean.cgm <- imps$pain.mean - mean(imps$pain.mean)
imps$painacpt.cgm <- imps$painacpt - mean(imps$painacpt)
N <- nrow(imps) / 100
J <- 132
numXatL1 <- 2
numXatL2 <- 3
df.L1 <- N - numXatL1 - 1
df.L2 <- J - numXatL2 - 1
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "posaff ~ pain.cwc + sleep + pain.mean.cgm + painacpt.cgm + female + (1 + pain.cwc | person)"
ddf <- c(df.L2,df.L1,df.L1,df.L2,df.L2,df.L2)
analysis <- with(implist, lmer(model, REML = T))
estimates <- testEstimates(analysis, extra.pars = T, df.com = ddf)
estimates
# analysis and pooling
implist <- as.mitml.list(split(imps, imps$Imputation))
library(mitml)
library(lme4)
# analysis and pooling
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "posaff ~ pain.cwc + sleep + pain.mean.cgm + painacpt.cgm + female + (1 + pain.cwc | person)"
ddf <- c(df.L2,df.L1,df.L1,df.L2,df.L2,df.L2)
analysis <- with(implist, lmer(model, REML = T))
temp
estimates
# read data from working directory
vars <- c("Imputation","clus","posaff","pain","sleep","painacpt","female")
imps <- NULL
for(m in 1:100){
temp <- imps.copy[imps.copy$Imputation == m, vars]
temp <- gmc(temp, c("pain"), by = c("clus"), FUN = mean, suffix = c(".meanj", ".cwc"), fulldataframe = TRUE)
imps = rbind(imps,temp)
}
names(imps) <- c("Imputation","person","posaff","pain","sleep","painacpt","female","pain.mean","pain.cwc")
# center
imps$sleep <- imps$sleep - mean(imps$sleep)
imps$pain.mean.cgm <- imps$pain.mean - mean(imps$pain.mean)
imps$painacpt.cgm <- imps$painacpt - mean(imps$painacpt)
View(imps)
vars <- c("Imputation","clus","posaff","pain","sleep","painacpt","female")
imps <- NULL
m = 1
m
temp <- imps.copy[imps.copy$Imputation == m, vars]
View(temp)
vars <- c("Imputation","clus","posaff","pain","sleep","painacpt","female")
imps <- NULL
for(m in 1:100){
temp <- imps.copy[imps.copy$Imputation == m, vars]
temp <- gmc(temp, c("pain"), by = c("clus"), FUN = mean, suffix = c(".meanj", ".cwc"), fulldataframe = TRUE)
imps = rbind(imps,temp)
}
names(imps) <- c("person","Imputation","posaff","pain","sleep","painacpt","female","pain.mean","pain.cwc")
imps$sleep <- imps$sleep - mean(imps$sleep)
imps$pain.mean.cgm <- imps$pain.mean - mean(imps$pain.mean)
imps$painacpt.cgm <- imps$painacpt - mean(imps$painacpt)
# degrees of freedom
N <- nrow(imps) / 100
J <- 132
numXatL1 <- 2
numXatL2 <- 3
df.L1 <- N - numXatL1 - 1
df.L2 <- J - numXatL2 - 1
# analysis and pooling
implist <- as.mitml.list(split(imps, imps$Imputation))
model <- "posaff ~ pain.cwc + sleep + pain.mean.cgm + painacpt.cgm + female + (1 + pain.cwc | person)"
ddf <- c(df.L2,df.L1,df.L1,df.L2,df.L2,df.L2)
analysis <- with(implist, lmer(model, REML = T))
estimates <- testEstimates(analysis, extra.pars = T, df.com = ddf)
estimates
contextual <- c("pain.mean.cgm-pain.cwc")
testConstraints(analysis, constraints = contextual, df.com = df.L2)
# example 8.7: random joint model mulilevel multiple imputation w jomo
# requires fdir and jomo packages
# set working directory
fdir::set()
# read imputed data from working directory
dat <- read.table("diary.dat", na.strings = "999")
names(dat) <- c('person','day','pain','sleep','posaff','negaff','lifegoal','female','educ','diagnoses','activity',
'painaccept','catastrophize','stress')
# define binary variable as a factor
dat$female <- factor(dat$female, levels = c(0,1))
# define level-1 and level-2 variables
dat$icept <- 1
vars2impute.l1 <- c("posaff","pain","sleep")
vars2impute.l2 <- c("painaccept")
complete.l2 <- c("icept","female")
# joint model imputation with random covariance matrices in jomo
imps <- jomo::jomo(dat[vars2impute.l1], Y2 = dat[vars2impute.l2], X2 = dat[complete.l2], clus = dat$person,
nburn = 2000, nbetween = 2000, nimp = 100, meth = "random")
