# load libraries
library(lavaan)
# set working directory
fdir::set()
# read data from working directory
dat <- read.table("smokingcomplete.dat")
names(dat) <- c("id","intensity","hvysmoker","age","parsmoke","female","race","income","pareduc")
# center variables at their grand means
dat$age.cgm <- dat$age - mean(dat$age)
dat$income.cgm <- dat$income - mean(dat$income)
# specify model
model <- 'intensity ~ parsmoke + age.cgm + income.cgm'
# estimate model in lavaan
fit <- lavaan::sem(model, dat, meanstructure = TRUE, fixed.x = TRUE)
summary(fit, rsquare = TRUE, standardize = TRUE)
fit <- lavaan::sem(model, dat, meanstructure = TRUE, fixed.x = TRUE, estimator = "MLR")
summary(fit, rsquare = TRUE, standardize = TRUE)
fit <- lavaan::sem(model, dat, meanstructure = TRUE, fixed.x = TRUE, estimator = "MLR", se = "bootstrap")
summary(fit, rsquare = TRUE, standardize = TRUE)
fit <- lavaan::sem(model, dat, meanstructure = TRUE, fixed.x = TRUE, se = "bootstrap")
summary(fit, rsquare = TRUE, standardize = TRUE)
# specify model with constraints
model.constraints <- 'intensity ~ parsmoke*b1 + age.cgm*b2 + income.cgm*b3
b1 == 0
b2 == 0
b3 == 0'
# constraining slopes to 0 gives LRT versus the saturated model;
fit <- lavaan::sem(model.constraints, dat, meanstructure = TRUE, fixed.x = TRUE, estimator = "MLR")
summary(fit, rsquare = TRUE, standardize = TRUE)
model.constraints <- 'intensity ~ parsmoke*b1 + age.cgm*b2 + income.cgm*b3
b1 == 0
b2 == 0
b3 == 0'
# constraining slopes to 0 gives LRT versus the saturated model;
fit <- lavaan::sem(model.constraints, dat, meanstructure = TRUE, fixed.x = TRUE, estimator = "MLR")
summary(fit, rsquare = TRUE, standardize = TRUE)
model.constraints <- 'intensity ~ b1*parsmoke + b2*age.cgm + b3*income.cgm
b1 == 0
b2 == 0
b3 == 0'
# constraining slopes to 0 gives LRT versus the saturated model;
fit <- lavaan::sem(model.constraints, dat, meanstructure = TRUE, fixed.x = TRUE, estimator = "MLR")
summary(fit, rsquare = TRUE, standardize = TRUE)
model.labels <- 'intensity ~ b1*parsmoke + b2*age.cgm + b3*income.cgm'
constraints <- 'b1 == 0; b2 == 0; b3 == 0'
fit <- lavaan::sem(model.constraints, dat, meanstructure = TRUE, fixed.x = TRUE, estimator = "MLR")
summary(fit, rsquare = TRUE, standardize = TRUE)
lavaan::lavTestWald(fit, constraints = constraints)
model.labels <- 'intensity ~ b1*parsmoke + b2*age.cgm + b3*income.cgm'
constraints <- 'b1 == 0; b2 == 0; b3 == 0'
# wald test that all slopes equal 0
fit <- lavaan::sem(model.constraints, dat, meanstructure = TRUE, fixed.x = TRUE, estimator = "MLR")
summary(fit, rsquare = TRUE, standardize = TRUE)
fit <- lavaan::sem(model.labels, dat, meanstructure = TRUE, fixed.x = TRUE, estimator = "MLR")
summary(fit, rsquare = TRUE, standardize = TRUE)
lavaan::lavTestWald(fit, constraints = constraints)
# specify model with constraints
model.constraints <- 'intensity ~ b1*parsmoke + b2*age.cgm + b3*income.cgm
b1 == 0; b2 == 0; b3 == 0'
# constraining slopes to 0 gives LRT versus the saturated model
fit <- lavaan::sem(model.constraints, dat, meanstructure = TRUE, fixed.x = TRUE, estimator = "MLR")
summary(fit, rsquare = TRUE, standardize = TRUE)
# example 2.10: multiple regression
# requires fdir and lavaan packages
# set working directory
fdir::set()
# read data from working directory
dat <- read.table("smokingcomplete.dat")
names(dat) <- c("id","intensity","hvysmoker","age","parsmoke","female","race","income","pareduc")
# center variables at their grand means
dat$age.cgm <- dat$age - mean(dat$age)
dat$income.cgm <- dat$income - mean(dat$income)
# specify model
model <- 'intensity ~ parsmoke + age.cgm + income.cgm'
# regression model
fit <- lavaan::sem(model, dat, meanstructure = TRUE, fixed.x = TRUE)
summary(fit, rsquare = TRUE, standardize = TRUE)
# bootstrap standard errors and test statistics
fit <- lavaan::sem(model, dat, meanstructure = TRUE, fixed.x = TRUE, se = "bootstrap")
summary(fit, rsquare = TRUE, standardize = TRUE)
# robust standard errors and test statistics
fit <- lavaan::sem(model, dat, meanstructure = TRUE, fixed.x = TRUE, estimator = "MLR")
summary(fit, rsquare = TRUE, standardize = TRUE)
# specify model with labels
model.labels <- 'intensity ~ b1*parsmoke + b2*age.cgm + b3*income.cgm'
wald.constraints <- 'b1 == 0; b2 == 0; b3 == 0'
# wald test that all slopes equal 0
fit <- lavaan::sem(model.labels, dat, meanstructure = TRUE, fixed.x = TRUE, estimator = "MLR")
summary(fit, rsquare = TRUE, standardize = TRUE)
lavaan::lavTestWald(fit, constraints = wald.constraints)
# specify model with constraints
model.constraints <- 'intensity ~ b1*parsmoke + b2*age.cgm + b3*income.cgm
b1 == 0; b2 == 0; b3 == 0'
# constraining slopes to 0 gives LRT versus the saturated model
fit <- lavaan::sem(model.constraints, dat, meanstructure = TRUE, fixed.x = TRUE, estimator = "MLR")
summary(fit, rsquare = TRUE, standardize = TRUE)
# example 2.12: covariance matrix and correlations
# requires fdir and lavaan packages
# set working directory
fdir::set()
# read data from working directory
dat <- read.table("employeecomplete.dat")
names(dat) <- c("employee","team","turnover","male","empower","lmx","worksat","climate","cohesion")
# specify model
model <- '
worksat ~~ worksat
empower ~~ empower
lmx ~~ lmx
'
# estimate model in lavaan
fit <- lavaan::sem(model, dat, meanstructure = TRUE, fixed.x = FALSE)
summary(fit, standardize = TRUE)
model <- '
worksat ~~ empower
worksat ~~ lmx
empower ~~ lmx
'
fit <- lavaan::sem(model, dat, meanstructure = TRUE, fixed.x = FALSE)
summary(fit, standardize = TRUE)
# example 2.13: logistic and probit regression
# requires fdir package
# set working directory
fdir::set()
# read data from working directory
dat <- read.table("employeecomplete.dat")
names(dat) <- c("employee","team","turnover","male","empower","lmx","worksat","climate","cohesion")
# logistic regression model
logitreg <- glm(turnover ~ lmx + empower + male, data = dat, family = "binomial")
summary(logitreg)
probitreg <- glm(turnover ~ lmx + empower + male, data = dat, family = "binomial"(link = "probit"))
summary(probitreg)
wald.test(b = coef(logitreg), Sigma = vcov(logitreg), Terms = 2:4)
install.packages("aod")
aod::wald.test(b = coef(logitreg), Sigma = vcov(logitreg), Terms = 2:4)
probitreg <- glm(turnover ~ lmx + empower + male, data = dat, family = "binomial"(link = "probit"))
summary(probitreg)
aod::wald.test(b = coef(probitreg), Sigma = vcov(probitreg), Terms = 2:4)
